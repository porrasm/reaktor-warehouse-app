{"version":3,"sources":["services/productApi.ts","components/product.tsx","components/sidebar.tsx","utils/capitalize.ts","components/listing.tsx","App.tsx","index.tsx"],"names":["apiRetryID","getCategories","a","getAPIResponse","apiPath","categories","getManufacturers","category","manufacturers","getProducts","manufacturer","page","filter","params","pageItemCount","products","path","retries","retryID","i","axios","get","response","status","data","console","log","message","delay","ms","Promise","resolve","setTimeout","join","ProductInfo","product","Item","Content","Header","name","Description","availability","price","color","type","id","ProductList","clickHandler","List","divided","map","p","onClick","as","DDown","props","Dropdown","placeholder","fluid","selection","value","onChange","event","options","o","key","text","cat","substring","toUpperCase","SideBar","useState","setFilter","currentCategory","selectCategory","currentManufacturer","selectManufacturer","Input","icon","style","width","e","Button","updateFilter","pageCount","Pagination","boundaryRange","ellipsisItem","firstItem","lastItem","siblingRange","totalPages","activePage","onPageChange","selectPage","Number","loadingMessage","length","Message","Icon","loading","Listing","loadCategories","productApi","setState","updateProducts","state","getCurrentPageCount","window","alert","selectProduct","selectedProduct","this","Container","Grid","centered","columns","Column","Segment","Rail","position","React","Component","App","className","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.ffee40f9.chunk.js","sourcesContent":["import axios from 'axios'\r\nimport { IProduct, IAvailability } from '../../../general_types'\r\n\r\nconst baseURL = '/api/'\r\nconst timeout = 250\r\n\r\n// Used to cancel API call retries if another API call is requested\r\nlet apiRetryID = 0\r\n\r\n\r\nconst getCategories = async (): Promise<string[]> => {\r\n  const categories = await getAPIResponse<string[]>(apiPath([\"products\", \"categories\"]))\r\n  return categories ? categories : []\r\n}\r\nconst getManufacturers = async (category: string): Promise<string[]> => {\r\n  const manufacturers = await getAPIResponse<string[]>(apiPath([\"products\", \"manufacturers\"]), 6, { category })\r\n  return manufacturers ? manufacturers : []\r\n}\r\nconst getProducts = async (category: string, manufacturer: string, page: number, filter: string): Promise<IProduct[]> => {\r\n  const params = {\r\n    category,\r\n    page,\r\n    filter,\r\n    manufacturer,\r\n    pageItemCount: 100\r\n  }\r\n  const products = await getAPIResponse<IProduct[]>(apiPath([\"products\"]), 6, params)\r\n  return products ? products : []\r\n}\r\n\r\nconst getAPIResponse = async <T>(path: string, retries = 6, params: any = {}): Promise<T | null> => {\r\n  const retryID = ++apiRetryID\r\n  for (let i = 0; i < retries; i++) {\r\n    if (retryID !== apiRetryID) {\r\n      break\r\n    }\r\n    try {\r\n      const response = await axios.get(path, { params })\r\n      if (response.status != 200) {\r\n        throw \"Invalid response status received: \" + response.status\r\n      }\r\n      return response.data as T\r\n    } catch (e) {\r\n      console.log(\"Error fetching JSON from API: \", e.message, e)\r\n    }\r\n\r\n    await delay(timeout)\r\n  }\r\n  return null\r\n}\r\n\r\nconst delay = (ms: number) => {\r\n  return new Promise(resolve => setTimeout(resolve, ms));\r\n}\r\n\r\nconst apiPath = (path: string[]) => {\r\n  return baseURL + path.join(\"/\")\r\n}\r\n\r\nexport default {\r\n  getCategories,\r\n  getManufacturers,\r\n  getProducts\r\n}","import { IProduct } from '../../../general_types'\r\nimport { Item, List } from 'semantic-ui-react'\r\n\r\ntype ProductProps = {\r\n  product: IProduct\r\n}\r\n\r\ntype ProductListProps = {\r\n  products: IProduct[],\r\n  clickHandler: (product: IProduct) => void\r\n}\r\n\r\ntype ProductListItemProps = {\r\n  product: IProduct,\r\n  clickHandler: () => void\r\n}\r\n\r\n\r\nexport const ProductInfo : React.FC<ProductProps> = ({ product }: ProductProps) => <Item>\r\n  <Item.Content>\r\n    <Item.Header>{product.name}</Item.Header>\r\n    <Item.Description>\r\n      Availability: {product.availability}\r\n    </Item.Description>\r\n    <Item.Description>\r\n      Price: {product.price}\r\n    </Item.Description>\r\n    <Item.Description>\r\n      Manufacturer: {product.manufacturer}\r\n    </Item.Description>\r\n    <Item.Description>\r\n      Color: {product.color.join(\", \")}\r\n    </Item.Description>\r\n    <Item.Description>\r\n      Type: {product.type}\r\n    </Item.Description>\r\n    <Item.Description>\r\n      ID: {product.id}\r\n    </Item.Description>\r\n  </Item.Content>\r\n</Item>\r\n\r\nexport const ProductList: React.FC<ProductListProps> = ({ products, clickHandler }: ProductListProps) => <List divided>\r\n  {products.map(p => {\r\n    return <List.Item key={p.id} onClick={() => clickHandler(p)}>\r\n      <List.Content>\r\n        <List.Header as='a'>{p.name}</List.Header>\r\n        <List.Description>Availability: {p.availability}</List.Description>\r\n        <List.Description>Price: {p.price}</List.Description>\r\n      </List.Content>\r\n    </List.Item>\r\n  })}\r\n</List>\r\n\r\nexport const ProductListItem: React.FC<ProductListItemProps> = ({ product, clickHandler }: ProductListItemProps) => <List.Item key={product.id} onClick={clickHandler}>\r\n  <List.Content>\r\n    <List.Header as='a'>{product.name}</List.Header>\r\n    {product.availability == \"\" ? \"\" : <List.Description>Availability: {product.availability}</List.Description>}\r\n\r\n    <List.Description>Price: {product.price}</List.Description>\r\n  </List.Content>\r\n</List.Item>","import React, { useState } from 'react'\r\nimport { Dropdown, Input, Button, Pagination, Message, Icon } from 'semantic-ui-react'\r\nimport { capitalize } from '../utils/capitalize'\r\n\r\ntype SideBarProps = {\r\n  currentCategory: string,\r\n  categories: string[],\r\n  selectCategory: (category: string) => void,\r\n  currentManufacturer: string,\r\n  manufacturers: string[],\r\n  selectManufacturer: (manufacturer: string) => void,\r\n  updateFilter: (filter: string) => void,\r\n  page: number,\r\n  pageCount: number,\r\n  selectPage: (page: number) => void,\r\n  loadingMessage: string,\r\n}\r\n\r\ntype DDownProps = {\r\n  placeholder: string,\r\n  value: string,\r\n  onChange: (value: string) => void,\r\n  options: string[]\r\n}\r\n\r\nconst SideBar: React.FC<SideBarProps> = (props: SideBarProps) => {\r\n\r\n  const [filter, setFilter] = useState(\"\")\r\n\r\n  return <div>\r\n    <DDown placeholder=\"Select category\"\r\n      value={props.currentCategory}\r\n      onChange={props.selectCategory}\r\n      options={props.categories} />\r\n    <DDown placeholder=\"Select manufacturer\"\r\n      value={props.currentManufacturer}\r\n      onChange={props.selectManufacturer}\r\n      options={props.manufacturers} />\r\n      &nbsp;\r\n      <Input icon='search'\r\n      style={{ width: \"272px\" }}\r\n      onChange={(e, data) => setFilter(data.value as string)}>\r\n      <input />\r\n      <Button type='submit' onClick={() => props.updateFilter(filter)}>Search</Button>\r\n    </Input>\r\n      &nbsp;\r\n      {props.pageCount > 0 ? <Pagination\r\n      style={{ width: \"272px\" }}\r\n      boundaryRange={0}\r\n      ellipsisItem={null}\r\n      firstItem={null}\r\n      lastItem={null}\r\n      siblingRange={1}\r\n      totalPages={props.pageCount}\r\n      activePage={props.page}\r\n      onPageChange={(e, data) => props.selectPage(Number(data.activePage))}\r\n    /> : \"\"}\r\n    &nbsp;\r\n      {props.loadingMessage.length == 0 ? \"\" : <Message icon>\r\n      <Icon name='circle notched' loading />\r\n      <Message.Content>{props.loadingMessage}</Message.Content>\r\n    </Message>}\r\n  </div>\r\n}\r\n\r\nconst DDown: React.FC<DDownProps> = (props: DDownProps) => <Dropdown\r\n  placeholder={props.placeholder}\r\n  fluid\r\n  selection\r\n  value={props.value}\r\n  onChange={(event, data) => props.onChange(data.value as string)}\r\n  options={props.options.map(o => {\r\n    return {\r\n      key: o,\r\n      text: capitalize(o),\r\n      value: o\r\n    }\r\n  })}\r\n/>\r\n\r\nexport default SideBar","export const capitalize = (cat: string) => {\r\n  return cat.substring(0, 1).toUpperCase() + cat.substring(1)\r\n}","import React from 'react';\r\nimport { Container, Grid, Rail, Segment, Message } from 'semantic-ui-react'\r\nimport productApi from '../services/productApi'\r\nimport { IProduct } from '../../../general_types'\r\nimport { ProductInfo, ProductList } from './product'\r\nimport SideBar from './sidebar'\r\n\r\nexport interface IViewState {\r\n  categories: string[]\r\n  loadingMessage: string\r\n  category: string\r\n  manufacturer: string\r\n  manufacturers: string[]\r\n  products: IProduct[]\r\n  selectedProduct: IProduct | null\r\n  page: number\r\n  filter: string\r\n}\r\n\r\ninterface IProductUpdateParams {\r\n  category?: string\r\n  manufacturer?: string\r\n  page?: number\r\n  filter?: string\r\n}\r\n\r\nclass Listing extends React.Component<any, IViewState> {\r\n\r\n  pageItemCount = 20\r\n\r\n  constructor(props: any) {\r\n    super(props)\r\n\r\n    this.state = {\r\n      categories: [],\r\n      loadingMessage: \"\",\r\n      category: \"\",\r\n      manufacturer: \"\",\r\n      manufacturers: [],\r\n      products: [],\r\n      selectedProduct: null,\r\n      page: 1,\r\n      filter: \"\"\r\n    }\r\n  }\r\n\r\n  componentDidMount() {\r\n    this.loadCategories()\r\n  }\r\n  loadCategories = async () => {\r\n    const categories = await productApi.getCategories()\r\n    this.setState({ categories })\r\n  }\r\n\r\n  render() {\r\n\r\n    return (\r\n      <div>\r\n        <Container>\r\n          <Grid centered columns={3}>\r\n            <Grid.Column>\r\n              <Segment>\r\n                <ProductList products={this.state.products} clickHandler={this.selectProduct} />\r\n\r\n                <Rail position=\"left\">\r\n                  <SideBar\r\n                    currentCategory={this.state.category}\r\n                    categories={this.state.categories}\r\n                    selectCategory={this.selectCategory}\r\n                    currentManufacturer={this.state.manufacturer}\r\n                    manufacturers={this.state.manufacturers}\r\n                    selectManufacturer={this.selectManufacturer}\r\n                    updateFilter={this.updateFilter}\r\n                    page={this.state.page}\r\n                    pageCount={this.getCurrentPageCount()}\r\n                    selectPage={this.selectPage}\r\n                    loadingMessage={this.state.loadingMessage}\r\n                  />\r\n                </Rail>\r\n\r\n                <Rail position=\"right\">\r\n                  {this.state.selectedProduct ? <ProductInfo product={this.state.selectedProduct} />\r\n                    : <Message><Message.Content>Select a product for more information</Message.Content></Message>}\r\n                </Rail>\r\n\r\n              </Segment>\r\n            </Grid.Column>\r\n          </Grid>\r\n        </Container>\r\n      </div>\r\n    );\r\n  }\r\n\r\n\r\n  //#region utility\r\n  selectPage = (page: number) => {\r\n    console.log(\"Select page: \", page)\r\n    this.updateProducts({ page, filter: this.state.filter })\r\n  }\r\n\r\n  updateFilter = (filter: string) => {\r\n    this.updateProducts({ page: 1, filter })\r\n  }\r\n\r\n  getCurrentPageCount = () => {\r\n    return 100000\r\n    return Math.ceil(this.state.products.length / this.pageItemCount)\r\n  }\r\n\r\n  selectManufacturer = async (manufacturer: string) => {\r\n    console.log(\"Enabled manufacturer: \", manufacturer)\r\n    this.setState({ manufacturer })\r\n    this.updateProducts({ manufacturer })\r\n  }\r\n  //#endregion\r\n\r\n  //#region state\r\n  selectCategory = async (category: string) => {\r\n    const prevCategory = this.state.category\r\n    this.setState({ category, loadingMessage: \"Loading manufacturers...\" })\r\n    console.log(\"Enabled category: \", category)\r\n\r\n    const manufacturers = await productApi.getManufacturers(category)\r\n    this.setState({ manufacturers })\r\n\r\n    if (manufacturers.length == 0) {\r\n      window.alert(\"There seems to be an error accessing the API. Please try again.\")\r\n      return\r\n    }\r\n\r\n    this.updateProducts({ category, manufacturer: manufacturers[0] })\r\n  }\r\n\r\n  updateProducts = async ({ category = this.state.category, manufacturer = this.state.manufacturer, page = 1, filter = \"\" }: IProductUpdateParams) => {\r\n    console.log(\"Update products with page: \", page)\r\n    this.setState({ loadingMessage: \"Loading products...\", products: [] })\r\n    const products = await productApi.getProducts(category, manufacturer, page, filter)\r\n    this.setState({ products, loadingMessage: \"\", category, manufacturer, page, filter })\r\n  }\r\n\r\n  selectProduct = async (selectedProduct: IProduct) => {\r\n    console.log(\"Selected product: \", selectedProduct)\r\n    this.setState({ selectedProduct })\r\n  }\r\n  //#endregion\r\n}\r\n\r\nexport default Listing","import Listing from './components/listing';\n\nfunction App() {\n  return (\n    <div className=\"App\">\n\n      <Listing />\n\n    </div>\n  );\n}\n\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\nimport 'semantic-ui-css/semantic.min.css'\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);"],"sourceRoot":""}