{"version":3,"sources":["services/productApi.ts","components/product.tsx","components/sidebar.tsx","utils/capitalize.ts","components/listing.tsx","App.tsx","reportWebVitals.ts","index.tsx"],"names":["apiRetryID","getCategoryProducts","category","a","getAPIResponse","apiPath","products","getManufacturerAvailability","manufacturer","availability","path","retries","retryID","i","axios","get","response","status","data","console","log","message","delay","ms","Promise","resolve","setTimeout","join","ProductInfo","product","Item","Content","Header","name","Description","price","color","type","id","ProductList","clickHandler","List","divided","map","p","onClick","as","DDown","props","Dropdown","placeholder","fluid","selection","value","onChange","event","options","o","key","text","cat","substring","toUpperCase","SideBar","useState","filter","setFilter","currentCategory","selectCategory","categories","currentManufacturer","selectManufacturer","manufacturers","Input","icon","style","width","e","Button","updateFilter","pageCount","Pagination","boundaryRange","ellipsisItem","firstItem","lastItem","siblingRange","totalPages","activePage","page","onPageChange","selectPage","Number","loadingMessage","length","Message","Icon","loading","Listing","pageItemCount","getCurrentCategory","state","filterProducts","toLocaleLowerCase","includes","toLowerCase","slice","getProductAvailability","setState","getCurrentPageCount","Math","ceil","selectProduct","selectedProduct","prevCategory","productApi","sort","b","localeCompare","window","alert","getAvailableManufacturers","productDict","manAvailabilityArray","manAvailability","forEach","hs","Set","add","m","push","c","this","currentProducts","currentManufacturers","Container","Grid","centered","columns","Column","Segment","Rail","position","React","Component","App","className","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.1c382b49.chunk.js","sourcesContent":["import axios from 'axios'\r\nimport { IProduct, IAvailability } from '../../../general_types'\r\n\r\nconst baseURL = '/api/'\r\nconst timeout = 250\r\n\r\n// Used to cancel API call retries if another API call is requested\r\nlet apiRetryID = 0\r\n\r\n\r\nconst getCategoryProducts = async (category: string): Promise<IProduct[]> => {\r\n  const products = await getAPIResponse<IProduct[]>(apiPath([\"products\", category]))\r\n  return products ? products : []\r\n}\r\n\r\nconst getManufacturerAvailability = async (manufacturer: string): Promise<IAvailability[]> => {\r\n  const availability = await getAPIResponse<IAvailability[]>(apiPath([\"availability\", manufacturer]))\r\n  return availability ? availability : []\r\n}\r\n\r\nconst getAPIResponse = async <T>(path: string, retries = 6): Promise<T | null> => {\r\n  const retryID = ++apiRetryID\r\n  for (let i = 0; i < retries; i++) {\r\n    if (retryID !== apiRetryID) {\r\n      break\r\n    }\r\n    try {\r\n      const response = await axios.get(path)\r\n      if (response.status != 200) {\r\n        throw \"Invalid response status received: \" + response.status\r\n      }\r\n      return response.data as T\r\n    } catch (e) {\r\n      console.log(\"Error fetching JSON from API: \", e.message, e)\r\n    }\r\n\r\n    await delay(timeout)\r\n  }\r\n  return null\r\n}\r\n\r\nconst delay = (ms: number) => {\r\n  return new Promise(resolve => setTimeout(resolve, ms));\r\n}\r\n\r\nconst apiPath = (path: string[]) => {\r\n  return baseURL + path.join(\"/\")\r\n}\r\n\r\nexport default {\r\n  getCategoryProducts,\r\n  getManufacturerAvailability\r\n}","import { IProduct } from '../../../general_types'\r\nimport { Item, List } from 'semantic-ui-react'\r\n\r\ntype ProductProps = {\r\n  product: IProduct,\r\n  availability: string\r\n}\r\n\r\ntype ProductListProps = {\r\n  products: ProductProps[],\r\n  clickHandler: (product: IProduct) => void\r\n}\r\n\r\ntype ProductListItemProps = {\r\n  product: IProduct,\r\n  availability: string,\r\n  clickHandler: () => void\r\n}\r\n\r\n\r\nexport const ProductInfo = ({ product, availability }: ProductProps) => <Item>\r\n  <Item.Content>\r\n    <Item.Header>{product.name}</Item.Header>\r\n    <Item.Description>\r\n      Availability: {availability}\r\n    </Item.Description>\r\n    <Item.Description>\r\n      Price: {product.price}\r\n    </Item.Description>\r\n    <Item.Description>\r\n      Manufacturer: {product.manufacturer}\r\n    </Item.Description>\r\n    <Item.Description>\r\n      Color: {product.color.join(\", \")}\r\n    </Item.Description>\r\n    <Item.Description>\r\n      Type: {product.type}\r\n    </Item.Description>\r\n    <Item.Description>\r\n      ID: {product.id}\r\n    </Item.Description>\r\n  </Item.Content>\r\n</Item>\r\n\r\nexport const ProductList = ({ products, clickHandler }: ProductListProps) => <List divided>\r\n  {products.map(p => {\r\n    return <List.Item key={p.product.id} onClick={() => clickHandler(p.product)}>\r\n      <List.Content>\r\n        <List.Header as='a'>{p.product.name}</List.Header>\r\n        {p.availability == \"\" ? \"\" : <List.Description>Availability: {p.availability}</List.Description>}\r\n\r\n        <List.Description>Price: {p.product.price}</List.Description>\r\n      </List.Content>\r\n    </List.Item>\r\n  })}\r\n</List>\r\n\r\nexport const ProductListItem = ({ product, availability, clickHandler }: ProductListItemProps) => <List.Item key={product.id} onClick={clickHandler}>\r\n  <List.Content>\r\n    <List.Header as='a'>{product.name}</List.Header>\r\n    {availability == \"\" ? \"\" : <List.Description>Availability: {availability}</List.Description>}\r\n\r\n    <List.Description>Price: {product.price}</List.Description>\r\n  </List.Content>\r\n</List.Item>","import React, { useState } from 'react'\r\nimport { Dropdown, Input, Button, Pagination, Message, Icon } from 'semantic-ui-react'\r\nimport { capitalize } from '../utils/capitalize'\r\n\r\ntype SideBarProps = {\r\n  currentCategory: string,\r\n  categories: string[],\r\n  selectCategory: (category: string) => void,\r\n  currentManufacturer: string,\r\n  manufacturers: string[],\r\n  selectManufacturer: (manufacturer: string) => void,\r\n  updateFilter: (filter: string) => void,\r\n  page: number,\r\n  pageCount: number,\r\n  selectPage: (page: number) => void,\r\n  loadingMessage: string,\r\n}\r\n\r\ntype DDownProps = {\r\n  placeholder: string,\r\n  value: string,\r\n  onChange: (value: string) => void,\r\n  options: string[]\r\n}\r\n\r\nconst SideBar = (props: SideBarProps) => {\r\n\r\n  const [filter, setFilter] = useState(\"\")\r\n\r\n  return <div>\r\n    <DDown placeholder=\"Select category\"\r\n      value={props.currentCategory}\r\n      onChange={props.selectCategory}\r\n      options={props.categories} />\r\n    <DDown placeholder=\"Select manufacturer\"\r\n      value={props.currentManufacturer}\r\n      onChange={props.selectManufacturer}\r\n      options={props.manufacturers} />\r\n      &nbsp;\r\n      <Input icon='search'\r\n      style={{ width: \"272px\" }}\r\n      onChange={(e, data) => setFilter(data.value as string)}>\r\n      <input />\r\n      <Button type='submit' onClick={() => props.updateFilter(filter)}>Search</Button>\r\n    </Input>\r\n      &nbsp;\r\n      {props.pageCount > 0 ? <Pagination\r\n      style={{ width: \"272px\" }}\r\n      boundaryRange={0}\r\n      ellipsisItem={null}\r\n      firstItem={null}\r\n      lastItem={null}\r\n      siblingRange={1}\r\n      totalPages={props.pageCount}\r\n      activePage={props.page + 1}\r\n      onPageChange={(e, data) => props.selectPage(Number(data.activePage) - 1)}\r\n    /> : \"\"}\r\n    &nbsp;\r\n      {props.loadingMessage.length == 0 ? \"\" : <Message icon>\r\n      <Icon name='circle notched' loading />\r\n      <Message.Content>{props.loadingMessage}</Message.Content>\r\n    </Message>}\r\n  </div>\r\n}\r\n\r\nconst DDown = (props: DDownProps) => <Dropdown\r\n  placeholder={props.placeholder}\r\n  fluid\r\n  selection\r\n  value={props.value}\r\n  onChange={(event, data) => props.onChange(data.value as string)}\r\n  options={props.options.map(o => {\r\n    return {\r\n      key: o,\r\n      text: capitalize(o),\r\n      value: o\r\n    }\r\n  })}\r\n/>\r\n\r\nexport default SideBar","export const capitalize = (cat: string) => {\r\n  return cat.substring(0, 1).toUpperCase() + cat.substring(1)\r\n}","import React from 'react';\r\nimport { Container, Grid, Rail, Segment, Message } from 'semantic-ui-react'\r\nimport productApi from '../services/productApi'\r\nimport { IProduct } from '../../../general_types'\r\nimport { ProductInfo, ProductList } from './product'\r\nimport SideBar from './sidebar'\r\n\r\nexport interface IViewState {\r\n  loadingMessage: string,\r\n  category: string,\r\n  manufacturer: string,\r\n  selectedProduct: IProduct | null,\r\n  products: { [name: string]: Array<IProduct> },\r\n  availability: { [name: string]: { [name: string]: string } },\r\n  page: number,\r\n  filter: string\r\n}\r\n\r\nclass Listing extends React.Component<any, IViewState> {\r\n\r\n  pageItemCount = 20\r\n  categories = [\"gloves\", \"facemasks\", \"beanies\"]\r\n\r\n  constructor(props: any) {\r\n    super(props)\r\n\r\n    const productDict: { [name: string]: Array<IProduct> } = {}\r\n    this.categories.forEach(c => {\r\n      productDict[c] = []\r\n    });\r\n\r\n    this.state = {\r\n      loadingMessage: \"\",\r\n      category: \"\",\r\n      manufacturer: \"\",\r\n      selectedProduct: null,\r\n      products: productDict,\r\n      availability: {},\r\n      page: 0,\r\n      filter: \"\"\r\n    }\r\n  }\r\n\r\n  render() {\r\n\r\n    console.log(\"State: \", this.state)\r\n\r\n    const products = this.getCurrentCategory()\r\n    console.log(\"Producst: \", products)\r\n    const currentProducts = this.filterProducts(products)\r\n    console.log(\"Current products: \", currentProducts)\r\n    const currentManufacturers = this.getAvailableManufacturers(currentProducts)\r\n    console.log(\"Current manufacturers: \", currentManufacturers)\r\n\r\n    return (\r\n      <div>\r\n        <Container>\r\n          <Grid centered columns={3}>\r\n            <Grid.Column>\r\n              <Segment>\r\n                <ProductList products={currentProducts.map(p => {\r\n                  return {\r\n                    product: p,\r\n                    availability: this.getProductAvailability(p)\r\n                  }\r\n                })} clickHandler={this.selectProduct} />\r\n\r\n                <Rail position=\"left\">\r\n                  <SideBar\r\n                    currentCategory={this.state.category}\r\n                    categories={this.categories}\r\n                    selectCategory={this.selectCategory}\r\n                    currentManufacturer={this.state.manufacturer}\r\n                    manufacturers={currentManufacturers}\r\n                    selectManufacturer={this.selectManufacturer}\r\n                    updateFilter={this.updateFilter}\r\n                    page={this.state.page}\r\n                    pageCount={this.getCurrentPageCount()}\r\n                    selectPage={this.selectPage}\r\n                    loadingMessage={this.state.loadingMessage}\r\n                  />\r\n                </Rail>\r\n\r\n                <Rail position=\"right\">\r\n                  {this.state.selectedProduct ? <ProductInfo product={this.state.selectedProduct} availability={this.getProductAvailability(this.state.selectedProduct)} />\r\n                    : <Message><Message.Content>Select a product for more information</Message.Content></Message>}\r\n                </Rail>\r\n\r\n              </Segment>\r\n            </Grid.Column>\r\n          </Grid>\r\n        </Container>\r\n      </div>\r\n    );\r\n  }\r\n\r\n\r\n  //#region utility\r\n  getCurrentCategory = () => {\r\n    return this.state.products[this.state.category]\r\n  }\r\n\r\n  filterProducts = (products: IProduct[]) => {\r\n    const page = this.state.page * this.pageItemCount\r\n\r\n    console.log(\"In filter: \", this.state)\r\n\r\n    return products.filter(p => {\r\n      console.log(\"In filter callback: \", this.state)\r\n      return this.state.manufacturer == p.manufacturer && p.name.toLocaleLowerCase().includes(this.state.filter.toLowerCase())\r\n    }).slice(page, page + this.pageItemCount)\r\n  }\r\n\r\n  getProductAvailability = (p: IProduct) => {\r\n    if (!this.state.availability[p.manufacturer]) {\r\n      return \"\"\r\n    }\r\n    const availability = this.state.availability[p.manufacturer][p.id]\r\n    return availability ? availability : \"Error\"\r\n  }\r\n\r\n  selectPage = (page: number) => {\r\n    this.setState({ page })\r\n  }\r\n\r\n  updateFilter = (filter: string) => {\r\n    this.setState({ filter, page: 0 })\r\n  }\r\n\r\n  getCurrentPageCount = () => {\r\n    const products = this.state.products[this.state.category]\r\n    if (!products) {\r\n      return 0\r\n    }\r\n    return Math.ceil(products.length / this.pageItemCount)\r\n  }\r\n\r\n  selectProduct = async (selectedProduct: IProduct) => {\r\n    console.log(\"Selected product: \", selectedProduct)\r\n    this.setState({ selectedProduct })\r\n  }\r\n\r\n  selectCategory = async (category: string) => {\r\n    const prevCategory = this.state.category\r\n\r\n    if (this.state.products[category].length > 0) {\r\n      this.setState({ category, page: 0 })\r\n      return\r\n    }\r\n    this.setState({ category, loadingMessage: \"Loading products...\", page: 0 })\r\n\r\n    console.log(\"Enabled category: \", category)\r\n\r\n    const products = (await productApi.getCategoryProducts(category)).sort((a, b) => a.name.localeCompare(b.name))\r\n    if (products.length == 0) {\r\n      window.alert(\"There seems to be a problem accessing the database. Please try again later.\")\r\n      this.setState({ category: prevCategory, loadingMessage: \"\" })\r\n      return\r\n    }\r\n\r\n    const manufacturer = products.length > 0 ? this.getAvailableManufacturers(products)[0] : \"\"\r\n\r\n    const productDict = this.state.products\r\n    productDict[category] = products\r\n\r\n    this.setState({ products: productDict, loadingMessage: \"\" })\r\n    this.selectManufacturer(manufacturer)\r\n  }\r\n\r\n  selectManufacturer = async (manufacturer: string) => {\r\n    console.log(\"Selected manufacturer: \", manufacturer)\r\n\r\n    if (manufacturer == \"\") {\r\n      return\r\n    }\r\n\r\n    if (this.state.availability[manufacturer]) {\r\n      console.log(\"Already got information from manufacturer: \", manufacturer)\r\n      this.setState({ manufacturer, page: 0 })\r\n      return\r\n    }\r\n    this.setState({ manufacturer, loadingMessage: \"Loading stock data...\", page: 0 })\r\n\r\n    const manAvailabilityArray = await productApi.getManufacturerAvailability(manufacturer)\r\n    if (manAvailabilityArray.length == 0) {\r\n      if (manufacturer === this.state.manufacturer) {\r\n        window.alert(\"The availability data could not be accessed. There might be a problem with the database. Please try again later.\")\r\n      }\r\n      return\r\n    }\r\n\r\n    console.log(\"Received availability array: \", manAvailabilityArray)\r\n    const manAvailability: { [name: string]: string } = {}\r\n    manAvailabilityArray.forEach(a => {\r\n      manAvailability[a.id.toLowerCase()] = a.availability\r\n    });\r\n\r\n    const availability = this.state.availability\r\n    availability[manufacturer] = manAvailability\r\n    this.setState({ availability, loadingMessage: \"\" })\r\n  }\r\n\r\n  getAvailableManufacturers = (products: IProduct[]): string[] => {\r\n    if (!products) {\r\n      return []\r\n    }\r\n    const hs = new Set<string>()\r\n    products.forEach(p => {\r\n      hs.add(p.manufacturer)\r\n    });\r\n    const manufacturers: string[] = []\r\n    hs.forEach(m => {\r\n      manufacturers.push(m)\r\n    })\r\n    return manufacturers.sort()\r\n  }\r\n  //#endregion\r\n}\r\n\r\nexport default Listing","import React from 'react';\nimport logo from './logo.svg';\nimport './App.css';\nimport Listing from './components/listing';\n\nfunction App() {\n  return (\n    <div className=\"App\">\n\n      <Listing />\n\n    </div>\n  );\n}\n\nexport default App;\n","import { ReportHandler } from 'web-vitals';\n\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\nimport 'semantic-ui-css/semantic.min.css'\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}