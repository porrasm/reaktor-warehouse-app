{"version":3,"sources":["services/productApi.ts","components/listing.tsx","App.tsx","reportWebVitals.ts","index.tsx"],"names":["timeout","callID","getCategoryProducts","category","a","retries","id","i","console","log","axios","get","apiPath","response","status","data","message","e","delay","getManufacturerAvailability","manufacturer","ms","Promise","resolve","setTimeout","path","join","Listing","props","pageItemCount","categories","timer","filterUpdate","leftRail","pageCount","getCurrentPageCount","getCategoryDropdown","getManufacturerDropdown","Input","icon","style","width","onChange","value","Button","type","onClick","filterSearch","Pagination","boundaryRange","ellipsisItem","firstItem","lastItem","siblingRange","totalPages","activePage","state","page","onPageChange","setState","Number","loadingMessage","length","Message","Icon","name","loading","Content","Dropdown","placeholder","fluid","selection","event","selectCategory","options","map","c","key","text","categoryToString","manufacturers","getAvailableManufacturers","products","selectManufacturer","getProductListing","List","divided","filter","p","toLocaleLowerCase","includes","toLowerCase","slice","availability","getProductAvailability","Item","selectProduct","Header","as","Description","price","productInfo","product","Container","color","Math","ceil","selectedProduct","prevCategory","productApi","sort","b","localeCompare","window","alert","productDict","manAvailabilityArray","manAvailability","forEach","hs","Set","add","m","push","cat","substring","toUpperCase","Grid","centered","columns","Column","Segment","this","Rail","position","React","Component","App","className","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"kXAGMA,EAAU,IAEZC,EAAS,EAgBPC,EAAmB,uCAAG,WAAOC,GAAP,iCAAAC,EAAA,sDAAyBC,EAAzB,+BAAmC,EACvDC,IAAOL,EACJM,EAAI,EAFa,YAEVA,EAAIF,GAFM,oBAGpBC,IAAOL,EAHa,0DAMxBO,QAAQC,IAAR,kDAAuDJ,EAAU,EAAIE,EAArE,OAA6EJ,GANrD,mBAQCO,IAAMC,IAAIC,EAAQ,CAAC,WAAYT,KARhC,cAQhBU,EARgB,QASTC,OAAS,KATA,0CAUbD,EAASE,MAVI,eAYpBP,QAAQC,IAAI,+BAAgCI,GAZxB,kBAab,IAba,0DAgBtBL,QAAQC,IAAI,2BAA4B,CAAEN,WAAUa,QAAS,KAAEA,QAASC,EAAC,OAhBnD,yBAmBlBC,EAAMlB,GAnBY,QAEGO,IAFH,gDAqBnB,IArBmB,0DAAH,sDAyBnBY,EAA2B,uCAAG,WAAOC,GAAP,iCAAAhB,EAAA,sDAA6BC,EAA7B,+BAAuC,EACnEC,IAAOL,EACJM,EAAI,EAFqB,YAElBA,EAAIF,GAFc,oBAG5BC,IAAOL,EAHqB,0DAMhCO,QAAQC,IAAR,sDAA2DJ,EAAU,EAAIE,EAAzE,OAAiFa,GANjD,mBAQPV,IAAMC,IAAIC,EAAQ,CAAC,eAAgBQ,KAR5B,WASP,MADjBP,EARwB,QASjBC,OATiB,0CAUrBD,EAASE,MAVY,eAY5BP,QAAQC,IAAI,qCAAsCI,GAZtB,kBAarB,IAbqB,0DAiB9BL,QAAQC,IAAI,+BAAgC,CAAEW,eAAcJ,QAAS,KAAEA,QAASC,EAAC,OAjBnD,yBAoB1BC,EAAMlB,GApBoB,QAELO,IAFK,gDAsB3B,IAtB2B,0DAAH,sDAyB3BW,EAAQ,SAACG,GACb,OAAO,IAAIC,SAAQ,SAAAC,GAAO,OAAIC,WAAWD,EAASF,OAG9CT,EAAU,SAACa,GACf,MA1Ec,QA0EGA,EAAKC,KAAK,MAGd,GACbxB,sBACAiB,+BC4NaQ,E,kDApRb,WAAYC,GAAa,IAAD,uBACtB,cAAMA,IANRC,cAAgB,GAKQ,EAJxBC,WAAa,CAAC,SAAU,YAAa,WAIb,EAHxBC,MAAa,KAGW,EAFxBC,aAAuB,GAEC,EA2CxBC,SAAW,WAET,IAAMC,EAAY,EAAKC,sBAEvB,OAAO,gCACJ,EAAKC,oBAAoB,EAAKN,YAC9B,EAAKO,0BAFD,OAIL,eAACC,EAAA,EAAD,CAAOC,KAAK,SACVC,MAAO,CAAEC,MAAO,SAChBC,SAAU,SAACzB,EAAGF,GAAJ,OAAa,EAAKiB,aAAejB,EAAK4B,OAFlD,UAGE,0BACA,cAACC,EAAA,EAAD,CAAQC,KAAK,SAASC,QAAS,EAAKC,aAApC,uBARG,OAWJb,EAAY,EAAI,cAACc,EAAA,EAAD,CACfR,MAAO,CAAEC,MAAO,SAChBQ,cAAe,EACfC,aAAc,KACdC,UAAW,KACXC,SAAU,KACVC,aAAc,EACdC,WAAYpB,EACZqB,WAAY,EAAKC,MAAMC,KAAO,EAC9BC,aAAc,SAACzC,EAAGF,GAAW,EAAK4C,SAAS,CAAEF,KAAMG,OAAO7C,EAAKwC,YAAc,OAC1E,GArBA,OAwBgC,GAApC,EAAKC,MAAMK,eAAeC,OAAc,GAAK,eAACC,EAAA,EAAD,CAASxB,MAAI,EAAb,UAAc,cAACyB,EAAA,EAAD,CAAMC,KAAK,iBAAiBC,SAAO,IAAG,cAACH,EAAA,EAAQI,QAAT,UAAkB,EAAKX,MAAMK,wBAvE3G,EA2ExBzB,oBAAsB,SAACN,GACrB,OAAO,cAACsC,EAAA,EAAD,CACLC,YAAY,kBACZC,OAAK,EACLC,WAAS,EACT5B,MAAO,EAAKa,MAAMrD,SAClBuC,SAAU,SAAC8B,EAAOzD,GAAR,OAAiB,EAAK0D,eAAe1D,EAAK4B,QACpD+B,QAAS5C,EAAW6C,KAAI,SAAAC,GACtB,MAAO,CACLC,IAAKD,EACLE,KAAM,EAAKC,iBAAiBH,GAC5BjC,MAAOiC,SAtFS,EA4FxBvC,wBAA0B,WACxB,IAAM2C,EAAgB,EAAKC,0BAA0B,EAAKzB,MAAM0B,SAAS,EAAK1B,MAAMrD,WACpF,OAAO,cAACiE,EAAA,EAAD,CACLC,YAAY,sBACZC,OAAK,EACLC,WAAS,EACT5B,MAAO,EAAKa,MAAMpC,aAClBsB,SAAU,SAAC8B,EAAOzD,GAAR,OAAiB,EAAKoE,mBAAmBpE,EAAK4B,QACxD+B,QAASM,EAAcL,KAAI,SAAAC,GACzB,MAAO,CACLC,IAAKD,EACLE,KAAM,EAAKC,iBAAiBH,GAC5BjC,MAAOiC,SAxGS,EA8GxBQ,kBAAoB,SAACF,GACnB,IAAMzB,EAAO,EAAKD,MAAMC,KAAO,EAAK5B,cACpC,OAAKqD,EAKD,cAACG,EAAA,EAAD,CAAMC,SAAO,EAAb,SACGJ,EAASK,QAAO,SAAAC,GACf,OAAO,EAAKhC,MAAMpC,cAAgBoE,EAAEpE,cAAgBoE,EAAEvB,KAAKwB,oBAAoBC,SAAS,EAAKlC,MAAM+B,OAAOI,kBACzGC,MAAMnC,EAAMA,EAAO,EAAK5B,eACxB8C,KAAI,SAAAa,GACH,IAAMK,EAAiC,EAAKC,uBAAuBN,GACnE,OAAO,cAACH,EAAA,EAAKU,KAAN,CAAsBjD,QAAS,kBAAM,EAAKkD,cAAcR,IAAxD,SACL,eAACH,EAAA,EAAKlB,QAAN,WACE,cAACkB,EAAA,EAAKY,OAAN,CAAaC,GAAG,IAAhB,SAAqBV,EAAEvB,OACN,IAAhB4B,EAAqB,GAAK,eAACR,EAAA,EAAKc,YAAN,4BAAiCN,KAE5D,eAACR,EAAA,EAAKc,YAAN,qBAA0BX,EAAEY,aALTZ,EAAElF,cAVjC,GAjHoB,EAyIxBwF,uBAAyB,SAACN,GACxB,IAAK,EAAKhC,MAAMqC,aAAaL,EAAEpE,cAC7B,MAAO,GAET,IAAMyE,EAAe,EAAKrC,MAAMqC,aAAaL,EAAEpE,cAAcoE,EAAElF,IAC/D,OAAOuF,GAA8B,SA9If,EAiJxBQ,YAAc,SAACC,GACb,OAAKA,EAGE,cAACC,EAAA,EAAD,UACL,cAACR,EAAA,EAAD,UACE,eAACA,EAAA,EAAK5B,QAAN,WACE,cAAC4B,EAAA,EAAKE,OAAN,UAAcK,EAAQrC,OACtB,eAAC8B,EAAA,EAAKI,YAAN,4BACiB,EAAKL,uBAAuBQ,MAE7C,eAACP,EAAA,EAAKI,YAAN,qBACUG,EAAQF,SAElB,eAACL,EAAA,EAAKI,YAAN,4BACiBG,EAAQlF,gBAEzB,eAAC2E,EAAA,EAAKI,YAAN,qBACUG,EAAQE,MAAM9E,KAAK,SAE7B,eAACqE,EAAA,EAAKI,YAAN,oBACSG,EAAQzD,QAEjB,eAACkD,EAAA,EAAKI,YAAN,kBACOG,EAAQhG,aAtBZ,cAACyD,EAAA,EAAD,kDAnJa,EAkLxBhB,aAAe,WACb,EAAKY,SAAS,CAAE4B,OAAQ,EAAKvD,aAAcyB,KAAM,KAnL3B,EAsLxBtB,oBAAsB,WACpB,IAAM+C,EAAW,EAAK1B,MAAM0B,SAAS,EAAK1B,MAAMrD,UAChD,OAAK+E,EAGEuB,KAAKC,KAAKxB,EAASpB,OAAS,EAAKjC,eAF/B,GAzLa,EA8LxBmE,cA9LwB,uCA8LR,WAAOW,GAAP,SAAAvG,EAAA,sDACdI,QAAQC,IAAI,qBAAsBkG,GAClC,EAAKhD,SAAS,CAAEgD,oBAFF,2CA9LQ,wDAmMxBlC,eAnMwB,uCAmMP,WAAOtE,GAAP,qBAAAC,EAAA,yDACTwG,EAAe,EAAKpD,MAAMrD,WAE5B,EAAKqD,MAAM0B,SAAS/E,GAAU2D,OAAS,GAH5B,uBAIb,EAAKH,SAAS,CAAExD,WAAUsD,KAAM,IAJnB,iCAOf,EAAKE,SAAS,CAAExD,WAAU0D,eAAgB,sBAAuBJ,KAAM,IAEvEjD,QAAQC,IAAI,qBAAsBN,GATnB,SAWS0G,EAAW3G,oBAAoBC,GAXxC,UAYQ,IADjB+E,EAXS,OAWmD4B,MAAK,SAAC1G,EAAG2G,GAAJ,OAAU3G,EAAE6D,KAAK+C,cAAcD,EAAE9C,UAC3FH,OAZE,wBAabmD,OAAOC,MAAM,+EACb,EAAKvD,SAAS,CAAExD,SAAUyG,EAAc/C,eAAgB,KAd3C,2BAkBTzC,EAAe8D,EAASpB,OAAS,EAAI,EAAKmB,0BAA0BC,GAAU,GAAK,IAEnFiC,EAAc,EAAK3D,MAAM0B,UACnB/E,GAAY+E,EAExB,EAAKvB,SAAS,CAAEuB,SAAUiC,EAAatD,eAAgB,KACvD,EAAKsB,mBAAmB/D,GAxBT,4CAnMO,wDA8NxB+D,mBA9NwB,uCA8NH,WAAO/D,GAAP,mBAAAhB,EAAA,yDACnBI,QAAQC,IAAI,0BAA2BW,GAEnB,IAAhBA,EAHe,qDAOf,EAAKoC,MAAMqC,aAAazE,GAPT,uBAQjBZ,QAAQC,IAAI,8CAA+CW,GAC3D,EAAKuC,SAAS,CAAEvC,eAAcqC,KAAM,IATnB,iCAYnB,EAAKE,SAAS,CAAEvC,eAAcyC,eAAgB,wBAAyBJ,KAAM,IAZ1D,UAcgBoD,EAAW1F,4BAA4BC,GAdvD,WAegB,IAD7BgG,EAda,QAeMtD,OAfN,wBAgBb1C,IAAiB,EAAKoC,MAAMpC,cAC9B6F,OAAOC,MAAM,oHAjBE,2BAsBnB1G,QAAQC,IAAI,gCAAiC2G,GACvCC,EAA8C,GACpDD,EAAqBE,SAAQ,SAAAlH,GAC3BiH,EAAgBjH,EAAEE,GAAGqF,eAAiBvF,EAAEyF,iBAGpCA,EAAe,EAAKrC,MAAMqC,cACnBzE,GAAgBiG,EAC7B,EAAK1D,SAAS,CAAEkC,eAAchC,eAAgB,KA9B3B,4CA9NG,wDA+PxBoB,0BAA4B,SAACC,GAC3B,IAAKA,EACH,MAAO,GAET,IAAMqC,EAAK,IAAIC,IACftC,EAASoC,SAAQ,SAAA9B,GACf+B,EAAGE,IAAIjC,EAAEpE,iBAEX,IAAM4D,EAA0B,GAIhC,OAHAuC,EAAGD,SAAQ,SAAAI,GACT1C,EAAc2C,KAAKD,MAEd1C,EAAc8B,QA3QC,EA8QxB/B,iBAAmB,SAAC6C,GAClB,OAAOA,EAAIC,UAAU,EAAG,GAAGC,cAAgBF,EAAIC,UAAU,IA5QzD,IAAMV,EAAmD,GAHnC,OAItB,EAAKrF,WAAWwF,SAAQ,SAAA1C,GACtBuC,EAAYvC,GAAK,MAGnB,EAAKpB,MAAQ,CACXxC,QAAS,GACT6C,eAAgB,GAChB1D,SAAU,GACViB,aAAc,GACduF,gBAAiB,KACjBzB,SAAUiC,EACVtB,aAAc,GACdpC,KAAM,EACN8B,OAAQ,IAjBY,E,qDAqBd,IAAD,OACP,OACE,8BACE,cAACgB,EAAA,EAAD,UACE,cAACwB,EAAA,EAAD,CAAMC,UAAQ,EAACC,QAAS,EAAxB,SACE,cAACF,EAAA,EAAKG,OAAN,UACE,eAACC,EAAA,EAAD,WACyB,IAAtBC,KAAK5E,MAAMxC,QAAgB,GAAK,cAAC+C,EAAA,EAAD,CAASjB,QAAS,kBAAM,EAAKa,SAAS,CAAE3C,QAAS,MAAjD,SAAwD,cAAC+C,EAAA,EAAQI,QAAT,UAAkBiE,KAAK5E,MAAM+B,WACrH6C,KAAKhD,kBAAkBgD,KAAK5E,MAAM0B,SAASkD,KAAK5E,MAAMrD,WAEvD,cAACkI,EAAA,EAAD,CAAMC,SAAS,OAAf,SAAuBF,KAAKnG,aAC5B,cAACoG,EAAA,EAAD,CAAMC,SAAS,QAAf,SAAwBF,KAAK/B,YAAY+B,KAAK5E,MAAMmD,kC,GAvC9C4B,IAAMC,WCHbC,MAVf,WACE,OACE,qBAAKC,UAAU,MAAf,SAEE,cAAC,EAAD,OCKSC,EAZS,SAACC,GACnBA,GAAeA,aAAuBC,UACxC,8BAAqBC,MAAK,YAAkD,IAA/CC,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAON,GACPO,EAAQP,O,cCFdQ,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,SAM1Bb,M","file":"static/js/main.9e3c14cf.chunk.js","sourcesContent":["import axios from 'axios'\r\n\r\nconst baseURL = '/api/'\r\nconst timeout = 250\r\n\r\nlet callID = 0\r\n\r\nexport interface IProduct {\r\n  id: string,\r\n  type: string,\r\n  name: string,\r\n  color: Array<string>,\r\n  price: number,\r\n  manufacturer: string\r\n}\r\n\r\nexport interface IAvailability {\r\n  id: string,\r\n  availability: string\r\n}\r\n\r\nconst getCategoryProducts = async (category: string, retries = 6): Promise<Array<IProduct>> => {\r\n  const id = ++callID\r\n  for (let i = 0; i < retries; i++) {\r\n    if (id !== callID) {\r\n      break\r\n    }\r\n    console.log(`API request for products (retries left: ${retries - 1 - i}): `, category)\r\n    try {\r\n      const response = await axios.get(apiPath([\"products\", category]))\r\n      if (response.status = 200) {\r\n        return response.data as Array<IProduct>\r\n      } else {\r\n        console.log(\"Error fetchin product data: \", response)\r\n        return []\r\n      }\r\n    } catch (e) {\r\n      console.log('Error getting products: ', { category, message: e.message, e })\r\n    }\r\n\r\n    await delay(timeout)\r\n  }\r\n  return []\r\n}\r\n\r\n\r\nconst getManufacturerAvailability = async (manufacturer: string, retries = 6): Promise<Array<IAvailability>> => {\r\n  const id = ++callID\r\n  for (let i = 0; i < retries; i++) {\r\n    if (id !== callID) {\r\n      break\r\n    }\r\n    console.log(`API request for availability (retries left: ${retries - 1 - i}): `, manufacturer)\r\n    try {\r\n      const response = await axios.get(apiPath([\"availability\", manufacturer]))\r\n      if (response.status == 200) {\r\n        return response.data as Array<IAvailability>\r\n      } else {\r\n        console.log(\"Error fetching availability data: \", response)\r\n        return []\r\n      }\r\n\r\n    } catch (e) {\r\n      console.log('Error getting availability: ', { manufacturer, message: e.message, e })\r\n    }\r\n\r\n    await delay(timeout)\r\n  }\r\n  return []\r\n}\r\n\r\nconst delay = (ms: number) => {\r\n  return new Promise(resolve => setTimeout(resolve, ms));\r\n}\r\n\r\nconst apiPath = (path: Array<string>) => {\r\n  return baseURL + path.join(\"/\")\r\n}\r\n\r\nexport default {\r\n  getCategoryProducts,\r\n  getManufacturerAvailability,\r\n}","import { stringify } from 'querystring';\r\nimport React from 'react';\r\nimport { Container, Grid, Menu, Rail, Segment, Dropdown, Item, Message, List, Icon, Input, Pagination, Button } from 'semantic-ui-react'\r\nimport productApi from '../services/productApi'\r\nimport { IProduct } from '../services/productApi'\r\n\r\nexport interface IViewState {\r\n  message: string,\r\n  loadingMessage: string,\r\n  category: string,\r\n  manufacturer: string,\r\n  selectedProduct: IProduct | null,\r\n  products: { [name: string]: Array<IProduct> },\r\n  availability: { [name: string]: { [name: string]: string } },\r\n  page: number,\r\n  filter: string\r\n}\r\n\r\nclass Listing extends React.Component<any, IViewState> {\r\n\r\n  pageItemCount = 20\r\n  categories = [\"gloves\", \"facemasks\", \"beanies\"]\r\n  timer: any = null\r\n  filterUpdate: string = \"\"\r\n\r\n  constructor(props: any) {\r\n    super(props)\r\n\r\n    const productDict: { [name: string]: Array<IProduct> } = {}\r\n    this.categories.forEach(c => {\r\n      productDict[c] = []\r\n    });\r\n\r\n    this.state = {\r\n      message: \"\",\r\n      loadingMessage: \"\",\r\n      category: \"\",\r\n      manufacturer: \"\",\r\n      selectedProduct: null,\r\n      products: productDict,\r\n      availability: {},\r\n      page: 0,\r\n      filter: \"\"\r\n    }\r\n  }\r\n\r\n  render() {\r\n    return (\r\n      <div>\r\n        <Container>\r\n          <Grid centered columns={3}>\r\n            <Grid.Column>\r\n              <Segment>\r\n                {this.state.message == \"\" ? \"\" : <Message onClick={() => this.setState({ message: \"\" })}><Message.Content>{this.state.filter}</Message.Content></Message>}\r\n                {this.getProductListing(this.state.products[this.state.category])}\r\n\r\n                <Rail position=\"left\">{this.leftRail()}</Rail>\r\n                <Rail position=\"right\">{this.productInfo(this.state.selectedProduct)}</Rail>\r\n              </Segment>\r\n            </Grid.Column>\r\n          </Grid>\r\n        </Container>\r\n      </div>\r\n    );\r\n  }\r\n\r\n\r\n  //#region views\r\n  leftRail = () => {\r\n\r\n    const pageCount = this.getCurrentPageCount()\r\n\r\n    return <div>\r\n      {this.getCategoryDropdown(this.categories)}\r\n      {this.getManufacturerDropdown()}\r\n      &nbsp;\r\n      <Input icon='search'\r\n        style={{ width: \"272px\" }}\r\n        onChange={(e, data) => this.filterUpdate = data.value}>\r\n        <input />\r\n        <Button type='submit' onClick={this.filterSearch}>Search</Button>\r\n      </Input>\r\n      &nbsp;\r\n      {pageCount > 0 ? <Pagination\r\n        style={{ width: \"272px\" }}\r\n        boundaryRange={0}\r\n        ellipsisItem={null}\r\n        firstItem={null}\r\n        lastItem={null}\r\n        siblingRange={1}\r\n        totalPages={pageCount}\r\n        activePage={this.state.page + 1}\r\n        onPageChange={(e, data) => { this.setState({ page: Number(data.activePage) - 1 }) }}\r\n      /> : \"\"}\r\n\r\n      &nbsp;\r\n      {this.state.loadingMessage.length == 0 ? \"\" : <Message icon><Icon name='circle notched' loading /><Message.Content>{this.state.loadingMessage}</Message.Content></Message>}\r\n    </div >\r\n  }\r\n\r\n  getCategoryDropdown = (categories: Array<string>) => {\r\n    return <Dropdown\r\n      placeholder=\"Select category\"\r\n      fluid\r\n      selection\r\n      value={this.state.category}\r\n      onChange={(event, data) => this.selectCategory(data.value as string)}\r\n      options={categories.map(c => {\r\n        return {\r\n          key: c,\r\n          text: this.categoryToString(c),\r\n          value: c\r\n        }\r\n      })}\r\n    />\r\n  }\r\n\r\n  getManufacturerDropdown = () => {\r\n    const manufacturers = this.getAvailableManufacturers(this.state.products[this.state.category])\r\n    return <Dropdown\r\n      placeholder=\"Select Manufacturer\"\r\n      fluid\r\n      selection\r\n      value={this.state.manufacturer}\r\n      onChange={(event, data) => this.selectManufacturer(data.value as string)}\r\n      options={manufacturers.map(c => {\r\n        return {\r\n          key: c,\r\n          text: this.categoryToString(c),\r\n          value: c\r\n        }\r\n      })}\r\n    />\r\n  }\r\n\r\n  getProductListing = (products: Array<IProduct>) => {\r\n    const page = this.state.page * this.pageItemCount\r\n    if (!products) {\r\n      return\r\n    } else {\r\n\r\n      return (\r\n        <List divided>\r\n          {products.filter(p => {\r\n            return this.state.manufacturer == p.manufacturer && p.name.toLocaleLowerCase().includes(this.state.filter.toLowerCase())\r\n          }).slice(page, page + this.pageItemCount)\r\n            .map(p => {\r\n              const availability: string | Element = this.getProductAvailability(p)\r\n              return <List.Item key={p.id} onClick={() => this.selectProduct(p)}>\r\n                <List.Content>\r\n                  <List.Header as='a'>{p.name}</List.Header>\r\n                  {availability == \"\" ? \"\" : <List.Description>Availability: {availability}</List.Description>}\r\n\r\n                  <List.Description>Price: {p.price}</List.Description>\r\n                </List.Content>\r\n              </List.Item>\r\n            })}\r\n        </List>\r\n      )\r\n    }\r\n  }\r\n\r\n  getProductAvailability = (p: IProduct) => {\r\n    if (!this.state.availability[p.manufacturer]) {\r\n      return \"\"\r\n    }\r\n    const availability = this.state.availability[p.manufacturer][p.id]\r\n    return availability ? availability : \"Error\"\r\n  }\r\n\r\n  productInfo = (product: IProduct | null) => {\r\n    if (!product) {\r\n      return <Message>Select a product to view more info</Message>\r\n    }\r\n    return <Container>\r\n      <Item>\r\n        <Item.Content>\r\n          <Item.Header>{product.name}</Item.Header>\r\n          <Item.Description>\r\n            Availability: {this.getProductAvailability(product)}\r\n          </Item.Description>\r\n          <Item.Description>\r\n            Price: {product.price}\r\n          </Item.Description>\r\n          <Item.Description>\r\n            Manufacturer: {product.manufacturer}\r\n          </Item.Description>\r\n          <Item.Description>\r\n            Color: {product.color.join(\", \")}\r\n          </Item.Description>\r\n          <Item.Description>\r\n            Type: {product.type}\r\n          </Item.Description>\r\n          <Item.Description>\r\n            ID: {product.id}\r\n          </Item.Description>\r\n        </Item.Content>\r\n      </Item>\r\n    </Container>\r\n  }\r\n  //#endregion\r\n\r\n  //#region utility\r\n  filterSearch = () => {\r\n    this.setState({ filter: this.filterUpdate, page: 0 })\r\n  }\r\n\r\n  getCurrentPageCount = () => {\r\n    const products = this.state.products[this.state.category]\r\n    if (!products) {\r\n      return 0\r\n    }\r\n    return Math.ceil(products.length / this.pageItemCount)\r\n  }\r\n\r\n  selectProduct = async (selectedProduct: IProduct) => {\r\n    console.log(\"Selected product: \", selectedProduct)\r\n    this.setState({ selectedProduct })\r\n  }\r\n\r\n  selectCategory = async (category: string) => {\r\n    const prevCategory = this.state.category\r\n\r\n    if (this.state.products[category].length > 0) {\r\n      this.setState({ category, page: 0 })\r\n      return\r\n    }\r\n    this.setState({ category, loadingMessage: \"Loading products...\", page: 0 })\r\n\r\n    console.log(\"Enabled category: \", category)\r\n\r\n    const products = (await productApi.getCategoryProducts(category)).sort((a, b) => a.name.localeCompare(b.name))\r\n    if (products.length == 0) {\r\n      window.alert(\"There seems to be a problem accessing the database. Please try again later.\")\r\n      this.setState({ category: prevCategory, loadingMessage: \"\" })\r\n      return\r\n    }\r\n\r\n    const manufacturer = products.length > 0 ? this.getAvailableManufacturers(products)[0] : \"\"\r\n\r\n    const productDict = this.state.products\r\n    productDict[category] = products\r\n\r\n    this.setState({ products: productDict, loadingMessage: \"\" })\r\n    this.selectManufacturer(manufacturer)\r\n  }\r\n\r\n  selectManufacturer = async (manufacturer: string) => {\r\n    console.log(\"Selected manufacturer: \", manufacturer)\r\n\r\n    if (manufacturer == \"\") {\r\n      return\r\n    }\r\n\r\n    if (this.state.availability[manufacturer]) {\r\n      console.log(\"Already got information from manufacturer: \", manufacturer)\r\n      this.setState({ manufacturer, page: 0 })\r\n      return\r\n    }\r\n    this.setState({ manufacturer, loadingMessage: \"Loading stock data...\", page: 0 })\r\n\r\n    const manAvailabilityArray = await productApi.getManufacturerAvailability(manufacturer)\r\n    if (manAvailabilityArray.length == 0) {\r\n      if (manufacturer === this.state.manufacturer) {\r\n        window.alert(\"The availability data could not be accessed. There might be a problem with the database. Please try again later.\")\r\n      }\r\n      return\r\n    }\r\n\r\n    console.log(\"Received availability array: \", manAvailabilityArray)\r\n    const manAvailability: { [name: string]: string } = {}\r\n    manAvailabilityArray.forEach(a => {\r\n      manAvailability[a.id.toLowerCase()] = a.availability\r\n    });\r\n\r\n    const availability = this.state.availability\r\n    availability[manufacturer] = manAvailability\r\n    this.setState({ availability, loadingMessage: \"\" })\r\n  }\r\n\r\n  getAvailableManufacturers = (products: Array<IProduct>): string[] => {\r\n    if (!products) {\r\n      return []\r\n    }\r\n    const hs = new Set<string>()\r\n    products.forEach(p => {\r\n      hs.add(p.manufacturer)\r\n    });\r\n    const manufacturers: string[] = []\r\n    hs.forEach(m => {\r\n      manufacturers.push(m)\r\n    })\r\n    return manufacturers.sort()\r\n  }\r\n\r\n  categoryToString = (cat: string) => {\r\n    return cat.substring(0, 1).toUpperCase() + cat.substring(1)\r\n  }\r\n  //#endregion\r\n}\r\n\r\nexport default Listing","import React from 'react';\nimport logo from './logo.svg';\nimport './App.css';\nimport Listing from './components/listing';\n\nfunction App() {\n  return (\n    <div className=\"App\">\n\n      <Listing />\n\n    </div>\n  );\n}\n\nexport default App;\n","import { ReportHandler } from 'web-vitals';\n\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\nimport 'bootstrap/dist/css/bootstrap.min.css';\nimport 'semantic-ui-css/semantic.min.css'\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}