[{"P:\\Stuff\\Projects\\reaktor-assignment\\frontend\\src\\index.tsx":"1","P:\\Stuff\\Projects\\reaktor-assignment\\frontend\\src\\App.tsx":"2","P:\\Stuff\\Projects\\reaktor-assignment\\frontend\\src\\components\\listing.tsx":"3","P:\\Stuff\\Projects\\reaktor-assignment\\frontend\\src\\services\\productApi.ts":"4","P:\\Stuff\\Projects\\reaktor-assignment\\frontend\\src\\components\\product.tsx":"5","P:\\Stuff\\Projects\\reaktor-assignment\\frontend\\src\\components\\sidebar.tsx":"6","P:\\Stuff\\Projects\\reaktor-assignment\\frontend\\src\\utils\\capitalize.ts":"7"},{"size":238,"mtime":1611229715591,"results":"8","hashOfConfig":"9"},{"size":158,"mtime":1611229744012,"results":"10","hashOfConfig":"9"},{"size":4651,"mtime":1611682333722,"results":"11","hashOfConfig":"9"},{"size":1739,"mtime":1611682128746,"results":"12","hashOfConfig":"9"},{"size":1970,"mtime":1611404811650,"results":"13","hashOfConfig":"9"},{"size":2503,"mtime":1611682232924,"results":"14","hashOfConfig":"9"},{"size":110,"mtime":1611065615329,"results":"15","hashOfConfig":"9"},{"filePath":"16","messages":"17","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"18"},"1kl511w",{"filePath":"19","messages":"20","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"18"},{"filePath":"21","messages":"22","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"23","usedDeprecatedRules":"18"},{"filePath":"24","messages":"25","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"26","usedDeprecatedRules":"18"},{"filePath":"27","messages":"28","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"29","usedDeprecatedRules":"18"},{"filePath":"30","messages":"31","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"32","usedDeprecatedRules":"18"},{"filePath":"33","messages":"34","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"P:\\Stuff\\Projects\\reaktor-assignment\\frontend\\src\\index.tsx",[],["35","36"],"P:\\Stuff\\Projects\\reaktor-assignment\\frontend\\src\\App.tsx",[],"P:\\Stuff\\Projects\\reaktor-assignment\\frontend\\src\\components\\listing.tsx",["37"],"import React, { useEffect } from 'react';\r\nimport { Container, Grid, Rail, Segment, Message } from 'semantic-ui-react'\r\nimport productApi from '../services/productApi'\r\nimport { IProduct } from '../../../general_types'\r\nimport { ProductInfo, ProductList } from './product'\r\nimport SideBar from './sidebar'\r\n\r\ninterface IViewState {\r\n  loadingMessage: string\r\n  selectedProduct: IProduct | null\r\n}\r\n\r\ninterface IProductState {\r\n  categories: string[] | null\r\n  manufacturers: string[]\r\n}\r\n\r\ninterface IProductSelection {\r\n  category: string\r\n  manufacturer: string\r\n  page: number\r\n  filter: string\r\n}\r\n\r\ninterface IProductSelectionArgs {\r\n  category?: string\r\n  manufacturer?: string\r\n  page?: number\r\n  filter?: string\r\n}\r\n\r\nconst Listing: React.FC = () => {\r\n\r\n  const [view, setView] = React.useState<IViewState>({\r\n    loadingMessage: \"\",\r\n    selectedProduct: null\r\n  })\r\n  const [productData, setProductData] = React.useState<IProductState>({\r\n    categories: null,\r\n    manufacturers: [],\r\n  })\r\n  const [selection, setSelection] = React.useState<IProductSelection>({\r\n    category: \"\",\r\n    manufacturer: \"\",\r\n    page: 1,\r\n    filter: \"\"\r\n  })\r\n  const [products, setProducts] = React.useState<IProduct[]>([])\r\n\r\n  useEffect(() => {\r\n    if (!productData.categories) {\r\n      loadCategories()\r\n    }\r\n  })\r\n\r\n  //#region utilities\r\n  const loadCategories = async () => {\r\n    const categories = await productApi.getCategories()\r\n    setProductData({ ...productData, categories })\r\n  }\r\n\r\n  const selectPage = (page: number) => {\r\n    console.log(\"Select page: \", page)\r\n    updateProducts({ page, filter: selection.filter })\r\n  }\r\n\r\n  const updateFilter = (filter: string) => {\r\n    updateProducts({ page: 1, filter })\r\n  }\r\n\r\n  const getCurrentPageCount = () => {\r\n    return 10000\r\n  }\r\n\r\n  const selectManufacturer = async (manufacturer: string) => {\r\n    console.log(\"Enabled manufacturer: \", manufacturer)\r\n    updateProducts({ manufacturer })\r\n  }\r\n\r\n  const selectCategory = async (category: string) => {\r\n    setSelection({ ...selection, category })\r\n    setView({ ...view, loadingMessage: \"Loading manufacturers...\" })\r\n    console.log(\"Enabled category: \", category)\r\n\r\n    const manufacturers = await productApi.getManufacturers(category)\r\n    setProductData({ ...productData, manufacturers })\r\n    console.log(\"Set manufacturers: \", manufacturers)\r\n\r\n    if (manufacturers.length == 0) {\r\n      window.alert(\"There seems to be an error accessing the API. Please try again.\")\r\n      return\r\n    }\r\n\r\n    updateProducts({ category, manufacturer: manufacturers[0] })\r\n  }\r\n\r\n  const updateProducts = async ({ category = selection.category, manufacturer = selection.manufacturer, page = 1, filter = \"\" }: IProductSelectionArgs) => {\r\n    console.log(\"Update products with page: \", page)\r\n    setView({ ...view, loadingMessage: \"Loading products...\" })\r\n    setProducts([])\r\n    const products = await productApi.getProducts(category, manufacturer, page, filter)\r\n    setProducts(products)\r\n    setSelection({ ...selection, category, manufacturer, page, filter })\r\n    setView({ ...view, loadingMessage: \"\" })\r\n  }\r\n\r\n  const selectProduct = async (selectedProduct: IProduct) => {\r\n    console.log(\"Selected product: \", selectedProduct)\r\n    setView({ ...view, selectedProduct })\r\n  }\r\n  //#endregion\r\n\r\n  return (\r\n    <div>\r\n      <Container>\r\n        <Grid centered columns={3}>\r\n          <Grid.Column>\r\n            <Segment>\r\n              <ProductList products={products} clickHandler={selectProduct} />\r\n\r\n              <Rail position=\"left\">\r\n                <SideBar\r\n                  currentCategory={selection.category}\r\n                  categories={productData.categories ? productData.categories : []}\r\n                  selectCategory={selectCategory}\r\n                  currentManufacturer={selection.manufacturer}\r\n                  manufacturers={productData.manufacturers}\r\n                  selectManufacturer={selectManufacturer}\r\n                  updateFilter={updateFilter}\r\n                  page={selection.page}\r\n                  pageCount={getCurrentPageCount()}\r\n                  selectPage={selectPage}\r\n                  loadingMessage={view.loadingMessage}\r\n                />\r\n              </Rail>\r\n\r\n              <Rail position=\"right\">\r\n                {view.selectedProduct ? <ProductInfo product={view.selectedProduct} />\r\n                  : <Message><Message.Content>Select a product for more information</Message.Content></Message>}\r\n              </Rail>\r\n\r\n            </Segment>\r\n          </Grid.Column>\r\n        </Grid>\r\n      </Container>\r\n    </div>\r\n  )\r\n}\r\n\r\nexport default Listing","P:\\Stuff\\Projects\\reaktor-assignment\\frontend\\src\\services\\productApi.ts",["38","39","40"],"import axios from 'axios'\r\nimport { IProduct } from '../../../general_types'\r\n\r\nconst baseURL = '/api/'\r\n\r\n// Used to cancel API call retries if another API call is requested\r\nlet apiRetryID = 0\r\n\r\nconst pageItemCount = 100\r\n\r\nconst getCategories = async (): Promise<string[]> => {\r\n  const categories = await getAPIResponse<string[]>(apiPath([\"products\", \"categories\"]))\r\n  return categories ? categories : []\r\n}\r\nconst getManufacturers = async (category: string): Promise<string[]> => {\r\n  const manufacturers = await getAPIResponse<string[]>(apiPath([\"products\", \"manufacturers\"]), 6, { category })\r\n  return manufacturers ? manufacturers : []\r\n}\r\nconst getProducts = async (category: string, manufacturer: string, page: number, filter: string): Promise<IProduct[]> => {\r\n  const params = {\r\n    category,\r\n    page,\r\n    filter,\r\n    manufacturer,\r\n    pageItemCount\r\n  }\r\n  const products = await getAPIResponse<IProduct[]>(apiPath([\"products\"]), 6, params)\r\n  return products ? products : []\r\n}\r\n\r\nconst getAPIResponse = async <T>(path: string, retries = 6, params: any = {}): Promise<T | null> => {\r\n  const retryID = ++apiRetryID\r\n  for (let i = 0; i < retries; i++) {\r\n    if (retryID !== apiRetryID) {\r\n      break\r\n    }\r\n    try {\r\n      const response = await axios.get(path, { params })\r\n      if (response.status != 200) {\r\n        throw \"Invalid response status received: \" + response.status\r\n      }\r\n      return response.data as T\r\n    } catch (e) {\r\n      console.log(\"Error fetching JSON from API: \", e.message, e)\r\n    }\r\n  }\r\n  return null\r\n}\r\n\r\nconst apiPath = (path: string[]) => {\r\n  return baseURL + path.join(\"/\")\r\n}\r\n\r\nexport default {\r\n  getCategories,\r\n  getManufacturers,\r\n  getProducts,\r\n  pageItemCount\r\n}","P:\\Stuff\\Projects\\reaktor-assignment\\frontend\\src\\components\\product.tsx",["41"],"import { IProduct } from '../../../general_types'\r\nimport { Item, List } from 'semantic-ui-react'\r\n\r\ntype ProductProps = {\r\n  product: IProduct\r\n}\r\n\r\ntype ProductListProps = {\r\n  products: IProduct[],\r\n  clickHandler: (product: IProduct) => void\r\n}\r\n\r\ntype ProductListItemProps = {\r\n  product: IProduct,\r\n  clickHandler: () => void\r\n}\r\n\r\n\r\nexport const ProductInfo : React.FC<ProductProps> = ({ product }: ProductProps) => <Item>\r\n  <Item.Content>\r\n    <Item.Header>{product.name}</Item.Header>\r\n    <Item.Description>\r\n      Availability: {product.availability}\r\n    </Item.Description>\r\n    <Item.Description>\r\n      Price: {product.price}\r\n    </Item.Description>\r\n    <Item.Description>\r\n      Manufacturer: {product.manufacturer}\r\n    </Item.Description>\r\n    <Item.Description>\r\n      Color: {product.color.join(\", \")}\r\n    </Item.Description>\r\n    <Item.Description>\r\n      Type: {product.type}\r\n    </Item.Description>\r\n    <Item.Description>\r\n      ID: {product.id}\r\n    </Item.Description>\r\n  </Item.Content>\r\n</Item>\r\n\r\nexport const ProductList: React.FC<ProductListProps> = ({ products, clickHandler }: ProductListProps) => <List divided>\r\n  {products.map(p => {\r\n    return <List.Item key={p.id} onClick={() => clickHandler(p)}>\r\n      <List.Content>\r\n        <List.Header as='a'>{p.name}</List.Header>\r\n        <List.Description>Availability: {p.availability}</List.Description>\r\n        <List.Description>Price: {p.price}</List.Description>\r\n      </List.Content>\r\n    </List.Item>\r\n  })}\r\n</List>\r\n\r\nexport const ProductListItem: React.FC<ProductListItemProps> = ({ product, clickHandler }: ProductListItemProps) => <List.Item key={product.id} onClick={clickHandler}>\r\n  <List.Content>\r\n    <List.Header as='a'>{product.name}</List.Header>\r\n    {product.availability == \"\" ? \"\" : <List.Description>Availability: {product.availability}</List.Description>}\r\n\r\n    <List.Description>Price: {product.price}</List.Description>\r\n  </List.Content>\r\n</List.Item>","P:\\Stuff\\Projects\\reaktor-assignment\\frontend\\src\\components\\sidebar.tsx",["42","43","44"],"import React, { useState } from 'react'\r\nimport { Dropdown, Input, Button, Pagination, Message, Icon } from 'semantic-ui-react'\r\nimport { capitalize } from '../utils/capitalize'\r\n\r\ntype SideBarProps = {\r\n  currentCategory: string,\r\n  categories: string[],\r\n  selectCategory: (category: string) => void,\r\n  currentManufacturer: string,\r\n  manufacturers: string[],\r\n  selectManufacturer: (manufacturer: string) => void,\r\n  updateFilter: (filter: string) => void,\r\n  page: number,\r\n  pageCount: number,\r\n  selectPage: (page: number) => void,\r\n  loadingMessage: string,\r\n}\r\n\r\ntype DDownProps = {\r\n  placeholder: string,\r\n  value: string,\r\n  onChange: (value: string) => void,\r\n  options: string[]\r\n}\r\n\r\nconst SideBar: React.FC<SideBarProps> = (props: SideBarProps) => {\r\n\r\n  const [filter, setFilter] = useState(\"\")\r\n\r\n  return <div>\r\n    <DDown placeholder=\"Select category\"\r\n      value={props.currentCategory}\r\n      onChange={props.selectCategory}\r\n      options={props.categories} />\r\n    <DDown placeholder=\"Select manufacturer\"\r\n      value={props.currentManufacturer}\r\n      onChange={props.selectManufacturer}\r\n      options={props.manufacturers} />\r\n      &nbsp;\r\n      {props.currentCategory == \"\" || props.currentManufacturer == \"\" ? \"\" : <div>\r\n      <Input icon='search'\r\n        style={{ width: \"272px\" }}\r\n        onChange={(e, data) => setFilter(data.value as string)}>\r\n        <input />\r\n        <Button type='submit' onClick={() => props.updateFilter(filter)}>Search</Button>\r\n      </Input>\r\n      &nbsp;\r\n      {props.pageCount > 0 ? <Pagination\r\n        style={{ width: \"272px\" }}\r\n        boundaryRange={0}\r\n        ellipsisItem={null}\r\n        firstItem={null}\r\n        lastItem={null}\r\n        siblingRange={1}\r\n        totalPages={props.pageCount}\r\n        activePage={props.page}\r\n        onPageChange={(e, data) => props.selectPage(Number(data.activePage))}\r\n      /> : \"\"}\r\n    </div>}\r\n\r\n    &nbsp;\r\n      {props.loadingMessage.length == 0 ? \"\" : <Message icon>\r\n      <Icon name='circle notched' loading />\r\n      <Message.Content>{props.loadingMessage}</Message.Content>\r\n    </Message>}\r\n  </div>\r\n}\r\n\r\nconst DDown: React.FC<DDownProps> = (props: DDownProps) => <Dropdown\r\n  placeholder={props.placeholder}\r\n  fluid\r\n  selection\r\n  value={props.value}\r\n  onChange={(event, data) => props.onChange(data.value as string)}\r\n  options={props.options.map(o => {\r\n    return {\r\n      key: o,\r\n      text: capitalize(o),\r\n      value: o\r\n    }\r\n  })}\r\n/>\r\n\r\nexport default SideBar","P:\\Stuff\\Projects\\reaktor-assignment\\frontend\\src\\utils\\capitalize.ts",[],{"ruleId":"45","replacedBy":"46"},{"ruleId":"47","replacedBy":"48"},{"ruleId":"49","severity":1,"message":"50","line":89,"column":30,"nodeType":"51","messageId":"52","endLine":89,"endColumn":32},{"ruleId":"49","severity":1,"message":"53","line":39,"column":27,"nodeType":"51","messageId":"52","endLine":39,"endColumn":29},{"ruleId":"54","severity":1,"message":"55","line":40,"column":9,"nodeType":"56","messageId":"57","endLine":40,"endColumn":69},{"ruleId":"58","severity":1,"message":"59","line":54,"column":1,"nodeType":"60","endLine":59,"endColumn":2},{"ruleId":"49","severity":1,"message":"50","line":58,"column":27,"nodeType":"51","messageId":"52","endLine":58,"endColumn":29},{"ruleId":"49","severity":1,"message":"50","line":40,"column":30,"nodeType":"51","messageId":"52","endLine":40,"endColumn":32},{"ruleId":"49","severity":1,"message":"50","line":40,"column":65,"nodeType":"51","messageId":"52","endLine":40,"endColumn":67},{"ruleId":"49","severity":1,"message":"50","line":62,"column":36,"nodeType":"51","messageId":"52","endLine":62,"endColumn":38},"no-native-reassign",["61"],"no-negated-in-lhs",["62"],"eqeqeq","Expected '===' and instead saw '=='.","BinaryExpression","unexpected","Expected '!==' and instead saw '!='.","no-throw-literal","Expected an error object to be thrown.","ThrowStatement","object","import/no-anonymous-default-export","Assign object to a variable before exporting as module default","ExportDefaultDeclaration","no-global-assign","no-unsafe-negation"]