[{"P:\\Stuff\\Projects\\reaktor-assignment\\frontend\\src\\index.tsx":"1","P:\\Stuff\\Projects\\reaktor-assignment\\frontend\\src\\App.tsx":"2","P:\\Stuff\\Projects\\reaktor-assignment\\frontend\\src\\components\\listing.tsx":"3","P:\\Stuff\\Projects\\reaktor-assignment\\frontend\\src\\services\\productApi.ts":"4","P:\\Stuff\\Projects\\reaktor-assignment\\frontend\\src\\components\\product.tsx":"5","P:\\Stuff\\Projects\\reaktor-assignment\\frontend\\src\\components\\sidebar.tsx":"6","P:\\Stuff\\Projects\\reaktor-assignment\\frontend\\src\\utils\\capitalize.ts":"7"},{"size":238,"mtime":1611229715591,"results":"8","hashOfConfig":"9"},{"size":158,"mtime":1611229744012,"results":"10","hashOfConfig":"9"},{"size":4513,"mtime":1611412079988,"results":"11","hashOfConfig":"9"},{"size":1748,"mtime":1611673661944,"results":"12","hashOfConfig":"9"},{"size":1970,"mtime":1611404811650,"results":"13","hashOfConfig":"9"},{"size":2374,"mtime":1611404838947,"results":"14","hashOfConfig":"9"},{"size":110,"mtime":1611065615329,"results":"15","hashOfConfig":"9"},{"filePath":"16","messages":"17","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"18"},"1kl511w",{"filePath":"19","messages":"20","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"18"},{"filePath":"21","messages":"22","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"23","usedDeprecatedRules":"18"},{"filePath":"24","messages":"25","errorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"26","messages":"27","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"28","usedDeprecatedRules":"18"},{"filePath":"29","messages":"30","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"31","usedDeprecatedRules":"18"},{"filePath":"32","messages":"33","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"P:\\Stuff\\Projects\\reaktor-assignment\\frontend\\src\\index.tsx",[],["34","35"],"P:\\Stuff\\Projects\\reaktor-assignment\\frontend\\src\\App.tsx",[],"P:\\Stuff\\Projects\\reaktor-assignment\\frontend\\src\\components\\listing.tsx",["36","37","38"],"import React from 'react';\r\nimport { Container, Grid, Rail, Segment, Message } from 'semantic-ui-react'\r\nimport productApi from '../services/productApi'\r\nimport { IProduct } from '../../../general_types'\r\nimport { ProductInfo, ProductList } from './product'\r\nimport SideBar from './sidebar'\r\n\r\nexport interface IViewState {\r\n  categories: string[]\r\n  loadingMessage: string\r\n  category: string\r\n  manufacturer: string\r\n  manufacturers: string[]\r\n  products: IProduct[]\r\n  selectedProduct: IProduct | null\r\n  page: number\r\n  filter: string\r\n}\r\n\r\ninterface IProductUpdateParams {\r\n  category?: string\r\n  manufacturer?: string\r\n  page?: number\r\n  filter?: string\r\n}\r\n\r\nclass Listing extends React.Component<any, IViewState> {\r\n\r\n  pageItemCount = 20\r\n\r\n  constructor(props: any) {\r\n    super(props)\r\n\r\n    this.state = {\r\n      categories: [],\r\n      loadingMessage: \"\",\r\n      category: \"\",\r\n      manufacturer: \"\",\r\n      manufacturers: [],\r\n      products: [],\r\n      selectedProduct: null,\r\n      page: 1,\r\n      filter: \"\"\r\n    }\r\n  }\r\n\r\n  componentDidMount() {\r\n    this.loadCategories()\r\n  }\r\n  loadCategories = async () => {\r\n    const categories = await productApi.getCategories()\r\n    this.setState({ categories })\r\n  }\r\n\r\n  render() {\r\n\r\n    return (\r\n      <div>\r\n        <Container>\r\n          <Grid centered columns={3}>\r\n            <Grid.Column>\r\n              <Segment>\r\n                <ProductList products={this.state.products} clickHandler={this.selectProduct} />\r\n\r\n                <Rail position=\"left\">\r\n                  <SideBar\r\n                    currentCategory={this.state.category}\r\n                    categories={this.state.categories}\r\n                    selectCategory={this.selectCategory}\r\n                    currentManufacturer={this.state.manufacturer}\r\n                    manufacturers={this.state.manufacturers}\r\n                    selectManufacturer={this.selectManufacturer}\r\n                    updateFilter={this.updateFilter}\r\n                    page={this.state.page}\r\n                    pageCount={this.getCurrentPageCount()}\r\n                    selectPage={this.selectPage}\r\n                    loadingMessage={this.state.loadingMessage}\r\n                  />\r\n                </Rail>\r\n\r\n                <Rail position=\"right\">\r\n                  {this.state.selectedProduct ? <ProductInfo product={this.state.selectedProduct} />\r\n                    : <Message><Message.Content>Select a product for more information</Message.Content></Message>}\r\n                </Rail>\r\n\r\n              </Segment>\r\n            </Grid.Column>\r\n          </Grid>\r\n        </Container>\r\n      </div>\r\n    );\r\n  }\r\n\r\n\r\n  //#region utility\r\n  selectPage = (page: number) => {\r\n    console.log(\"Select page: \", page)\r\n    this.updateProducts({ page, filter: this.state.filter })\r\n  }\r\n\r\n  updateFilter = (filter: string) => {\r\n    this.updateProducts({ page: 1, filter })\r\n  }\r\n\r\n  getCurrentPageCount = () => {\r\n    return 100000\r\n    return Math.ceil(this.state.products.length / this.pageItemCount)\r\n  }\r\n\r\n  selectManufacturer = async (manufacturer: string) => {\r\n    console.log(\"Enabled manufacturer: \", manufacturer)\r\n    this.setState({ manufacturer })\r\n    this.updateProducts({ manufacturer })\r\n  }\r\n  //#endregion\r\n\r\n  //#region state\r\n  selectCategory = async (category: string) => {\r\n    const prevCategory = this.state.category\r\n    this.setState({ category, loadingMessage: \"Loading manufacturers...\" })\r\n    console.log(\"Enabled category: \", category)\r\n\r\n    const manufacturers = await productApi.getManufacturers(category)\r\n    this.setState({ manufacturers })\r\n\r\n    if (manufacturers.length == 0) {\r\n      window.alert(\"There seems to be an error accessing the API. Please try again.\")\r\n      return\r\n    }\r\n\r\n    this.updateProducts({ category, manufacturer: manufacturers[0] })\r\n  }\r\n\r\n  updateProducts = async ({ category = this.state.category, manufacturer = this.state.manufacturer, page = 1, filter = \"\" }: IProductUpdateParams) => {\r\n    console.log(\"Update products with page: \", page)\r\n    this.setState({ loadingMessage: \"Loading products...\", products: [] })\r\n    const products = await productApi.getProducts(category, manufacturer, page, filter)\r\n    this.setState({ products, loadingMessage: \"\", category, manufacturer, page, filter })\r\n  }\r\n\r\n  selectProduct = async (selectedProduct: IProduct) => {\r\n    console.log(\"Selected product: \", selectedProduct)\r\n    this.setState({ selectedProduct })\r\n  }\r\n  //#endregion\r\n}\r\n\r\nexport default Listing","P:\\Stuff\\Projects\\reaktor-assignment\\frontend\\src\\services\\productApi.ts",["39","40","41","42"],"P:\\Stuff\\Projects\\reaktor-assignment\\frontend\\src\\components\\product.tsx",["43"],"import { IProduct } from '../../../general_types'\r\nimport { Item, List } from 'semantic-ui-react'\r\n\r\ntype ProductProps = {\r\n  product: IProduct\r\n}\r\n\r\ntype ProductListProps = {\r\n  products: IProduct[],\r\n  clickHandler: (product: IProduct) => void\r\n}\r\n\r\ntype ProductListItemProps = {\r\n  product: IProduct,\r\n  clickHandler: () => void\r\n}\r\n\r\n\r\nexport const ProductInfo : React.FC<ProductProps> = ({ product }: ProductProps) => <Item>\r\n  <Item.Content>\r\n    <Item.Header>{product.name}</Item.Header>\r\n    <Item.Description>\r\n      Availability: {product.availability}\r\n    </Item.Description>\r\n    <Item.Description>\r\n      Price: {product.price}\r\n    </Item.Description>\r\n    <Item.Description>\r\n      Manufacturer: {product.manufacturer}\r\n    </Item.Description>\r\n    <Item.Description>\r\n      Color: {product.color.join(\", \")}\r\n    </Item.Description>\r\n    <Item.Description>\r\n      Type: {product.type}\r\n    </Item.Description>\r\n    <Item.Description>\r\n      ID: {product.id}\r\n    </Item.Description>\r\n  </Item.Content>\r\n</Item>\r\n\r\nexport const ProductList: React.FC<ProductListProps> = ({ products, clickHandler }: ProductListProps) => <List divided>\r\n  {products.map(p => {\r\n    return <List.Item key={p.id} onClick={() => clickHandler(p)}>\r\n      <List.Content>\r\n        <List.Header as='a'>{p.name}</List.Header>\r\n        <List.Description>Availability: {p.availability}</List.Description>\r\n        <List.Description>Price: {p.price}</List.Description>\r\n      </List.Content>\r\n    </List.Item>\r\n  })}\r\n</List>\r\n\r\nexport const ProductListItem: React.FC<ProductListItemProps> = ({ product, clickHandler }: ProductListItemProps) => <List.Item key={product.id} onClick={clickHandler}>\r\n  <List.Content>\r\n    <List.Header as='a'>{product.name}</List.Header>\r\n    {product.availability == \"\" ? \"\" : <List.Description>Availability: {product.availability}</List.Description>}\r\n\r\n    <List.Description>Price: {product.price}</List.Description>\r\n  </List.Content>\r\n</List.Item>","P:\\Stuff\\Projects\\reaktor-assignment\\frontend\\src\\components\\sidebar.tsx",["44"],"import React, { useState } from 'react'\r\nimport { Dropdown, Input, Button, Pagination, Message, Icon } from 'semantic-ui-react'\r\nimport { capitalize } from '../utils/capitalize'\r\n\r\ntype SideBarProps = {\r\n  currentCategory: string,\r\n  categories: string[],\r\n  selectCategory: (category: string) => void,\r\n  currentManufacturer: string,\r\n  manufacturers: string[],\r\n  selectManufacturer: (manufacturer: string) => void,\r\n  updateFilter: (filter: string) => void,\r\n  page: number,\r\n  pageCount: number,\r\n  selectPage: (page: number) => void,\r\n  loadingMessage: string,\r\n}\r\n\r\ntype DDownProps = {\r\n  placeholder: string,\r\n  value: string,\r\n  onChange: (value: string) => void,\r\n  options: string[]\r\n}\r\n\r\nconst SideBar: React.FC<SideBarProps> = (props: SideBarProps) => {\r\n\r\n  const [filter, setFilter] = useState(\"\")\r\n\r\n  return <div>\r\n    <DDown placeholder=\"Select category\"\r\n      value={props.currentCategory}\r\n      onChange={props.selectCategory}\r\n      options={props.categories} />\r\n    <DDown placeholder=\"Select manufacturer\"\r\n      value={props.currentManufacturer}\r\n      onChange={props.selectManufacturer}\r\n      options={props.manufacturers} />\r\n      &nbsp;\r\n      <Input icon='search'\r\n      style={{ width: \"272px\" }}\r\n      onChange={(e, data) => setFilter(data.value as string)}>\r\n      <input />\r\n      <Button type='submit' onClick={() => props.updateFilter(filter)}>Search</Button>\r\n    </Input>\r\n      &nbsp;\r\n      {props.pageCount > 0 ? <Pagination\r\n      style={{ width: \"272px\" }}\r\n      boundaryRange={0}\r\n      ellipsisItem={null}\r\n      firstItem={null}\r\n      lastItem={null}\r\n      siblingRange={1}\r\n      totalPages={props.pageCount}\r\n      activePage={props.page}\r\n      onPageChange={(e, data) => props.selectPage(Number(data.activePage))}\r\n    /> : \"\"}\r\n    &nbsp;\r\n      {props.loadingMessage.length == 0 ? \"\" : <Message icon>\r\n      <Icon name='circle notched' loading />\r\n      <Message.Content>{props.loadingMessage}</Message.Content>\r\n    </Message>}\r\n  </div>\r\n}\r\n\r\nconst DDown: React.FC<DDownProps> = (props: DDownProps) => <Dropdown\r\n  placeholder={props.placeholder}\r\n  fluid\r\n  selection\r\n  value={props.value}\r\n  onChange={(event, data) => props.onChange(data.value as string)}\r\n  options={props.options.map(o => {\r\n    return {\r\n      key: o,\r\n      text: capitalize(o),\r\n      value: o\r\n    }\r\n  })}\r\n/>\r\n\r\nexport default SideBar","P:\\Stuff\\Projects\\reaktor-assignment\\frontend\\src\\utils\\capitalize.ts",[],{"ruleId":"45","replacedBy":"46"},{"ruleId":"47","replacedBy":"48"},{"ruleId":"49","severity":1,"message":"50","line":107,"column":5,"nodeType":"51","messageId":"52","endLine":107,"endColumn":70},{"ruleId":"53","severity":1,"message":"54","line":119,"column":11,"nodeType":"55","messageId":"56","endLine":119,"endColumn":23},{"ruleId":"57","severity":1,"message":"58","line":126,"column":30,"nodeType":"59","messageId":"60","endLine":126,"endColumn":32},{"ruleId":"53","severity":1,"message":"61","line":2,"column":20,"nodeType":"55","messageId":"56","endLine":2,"endColumn":33},{"ruleId":"57","severity":1,"message":"62","line":38,"column":27,"nodeType":"59","messageId":"60","endLine":38,"endColumn":29},{"ruleId":"63","severity":1,"message":"64","line":39,"column":9,"nodeType":"65","messageId":"66","endLine":39,"endColumn":69},{"ruleId":"67","severity":1,"message":"68","line":57,"column":1,"nodeType":"69","endLine":61,"endColumn":2},{"ruleId":"57","severity":1,"message":"58","line":58,"column":27,"nodeType":"59","messageId":"60","endLine":58,"endColumn":29},{"ruleId":"57","severity":1,"message":"58","line":59,"column":36,"nodeType":"59","messageId":"60","endLine":59,"endColumn":38},"no-native-reassign",["70"],"no-negated-in-lhs",["71"],"no-unreachable","Unreachable code.","ReturnStatement","unreachableCode","@typescript-eslint/no-unused-vars","'prevCategory' is assigned a value but never used.","Identifier","unusedVar","eqeqeq","Expected '===' and instead saw '=='.","BinaryExpression","unexpected","'IAvailability' is defined but never used.","Expected '!==' and instead saw '!='.","no-throw-literal","Expected an error object to be thrown.","ThrowStatement","object","import/no-anonymous-default-export","Assign object to a variable before exporting as module default","ExportDefaultDeclaration","no-global-assign","no-unsafe-negation"]