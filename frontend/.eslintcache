[{"P:\\Stuff\\Projects\\reaktor-assignment\\frontend\\src\\index.tsx":"1","P:\\Stuff\\Projects\\reaktor-assignment\\frontend\\src\\App.tsx":"2","P:\\Stuff\\Projects\\reaktor-assignment\\frontend\\src\\components\\listing.tsx":"3","P:\\Stuff\\Projects\\reaktor-assignment\\frontend\\src\\services\\productApi.ts":"4","P:\\Stuff\\Projects\\reaktor-assignment\\frontend\\src\\components\\product.tsx":"5","P:\\Stuff\\Projects\\reaktor-assignment\\frontend\\src\\components\\sidebar.tsx":"6","P:\\Stuff\\Projects\\reaktor-assignment\\frontend\\src\\utils\\capitalize.ts":"7"},{"size":238,"mtime":1611229715591,"results":"8","hashOfConfig":"9"},{"size":158,"mtime":1611229744012,"results":"10","hashOfConfig":"9"},{"size":6847,"mtime":1611229584003,"results":"11","hashOfConfig":"9"},{"size":1503,"mtime":1611228763806,"results":"12","hashOfConfig":"9"},{"size":2007,"mtime":1611228763805,"results":"13","hashOfConfig":"9"},{"size":2336,"mtime":1611067390868,"results":"14","hashOfConfig":"9"},{"size":110,"mtime":1611065615329,"results":"15","hashOfConfig":"9"},{"filePath":"16","messages":"17","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"1kl511w",{"filePath":"18","messages":"19","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"20","messages":"21","errorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":"22","usedDeprecatedRules":"23"},{"filePath":"24","messages":"25","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"26","usedDeprecatedRules":"23"},{"filePath":"27","messages":"28","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"29","usedDeprecatedRules":"23"},{"filePath":"30","messages":"31","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"32","usedDeprecatedRules":"23"},{"filePath":"33","messages":"34","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"P:\\Stuff\\Projects\\reaktor-assignment\\frontend\\src\\index.tsx",[],"P:\\Stuff\\Projects\\reaktor-assignment\\frontend\\src\\App.tsx",[],"P:\\Stuff\\Projects\\reaktor-assignment\\frontend\\src\\components\\listing.tsx",["35","36","37","38"],"import React from 'react';\r\nimport { Container, Grid, Rail, Segment, Message } from 'semantic-ui-react'\r\nimport productApi from '../services/productApi'\r\nimport { IProduct } from '../../../general_types'\r\nimport { ProductInfo, ProductList } from './product'\r\nimport SideBar from './sidebar'\r\n\r\nexport interface IViewState {\r\n  loadingMessage: string,\r\n  category: string,\r\n  manufacturer: string,\r\n  selectedProduct: IProduct | null,\r\n  products: { [name: string]: Array<IProduct> },\r\n  availability: { [name: string]: { [name: string]: string } },\r\n  page: number,\r\n  filter: string\r\n}\r\n\r\nclass Listing extends React.Component<any, IViewState> {\r\n\r\n  pageItemCount = 20\r\n  categories = [\"gloves\", \"facemasks\", \"beanies\"]\r\n\r\n  constructor(props: any) {\r\n    super(props)\r\n\r\n    const productDict: { [name: string]: Array<IProduct> } = {}\r\n    this.categories.forEach(c => {\r\n      productDict[c] = []\r\n    });\r\n\r\n    this.state = {\r\n      loadingMessage: \"\",\r\n      category: \"\",\r\n      manufacturer: \"\",\r\n      selectedProduct: null,\r\n      products: productDict,\r\n      availability: {},\r\n      page: 0,\r\n      filter: \"\"\r\n    }\r\n  }\r\n\r\n  render() {\r\n    const currentProducts = this.filterProducts(this.getCurrentCategory())\r\n    const currentManufacturers = this.getAvailableManufacturers(this.getCurrentCategory())\r\n\r\n    return (\r\n      <div>\r\n        <Container>\r\n          <Grid centered columns={3}>\r\n            <Grid.Column>\r\n              <Segment>\r\n                <ProductList products={currentProducts.map(p => {\r\n                  return {\r\n                    product: p,\r\n                    availability: this.getProductAvailability(p)\r\n                  }\r\n                })} clickHandler={this.selectProduct} />\r\n\r\n                <Rail position=\"left\">\r\n                  <SideBar\r\n                    currentCategory={this.state.category}\r\n                    categories={this.categories}\r\n                    selectCategory={this.selectCategory}\r\n                    currentManufacturer={this.state.manufacturer}\r\n                    manufacturers={currentManufacturers}\r\n                    selectManufacturer={this.selectManufacturer}\r\n                    updateFilter={this.updateFilter}\r\n                    page={this.state.page}\r\n                    pageCount={this.getCurrentPageCount()}\r\n                    selectPage={this.selectPage}\r\n                    loadingMessage={this.state.loadingMessage}\r\n                  />\r\n                </Rail>\r\n\r\n                <Rail position=\"right\">\r\n                  {this.state.selectedProduct ? <ProductInfo product={this.state.selectedProduct} availability={this.getProductAvailability(this.state.selectedProduct)} />\r\n                    : <Message><Message.Content>Select a product for more information</Message.Content></Message>}\r\n                </Rail>\r\n\r\n              </Segment>\r\n            </Grid.Column>\r\n          </Grid>\r\n        </Container>\r\n      </div>\r\n    );\r\n  }\r\n\r\n\r\n  //#region utility\r\n  getCurrentCategory = () => {\r\n    const products = this.state.products[this.state.category]\r\n    return products ? products : []\r\n  }\r\n\r\n  filterProducts = (products: IProduct[]) => {\r\n    const page = this.state.page * this.pageItemCount\r\n    return products.filter(p => {\r\n      return this.state.manufacturer == p.manufacturer && p.name.toLocaleLowerCase().includes(this.state.filter.toLowerCase())\r\n    }).slice(page, page + this.pageItemCount)\r\n  }\r\n\r\n  getProductAvailability = (p: IProduct) => {\r\n    if (!this.state.availability[p.manufacturer]) {\r\n      return \"\"\r\n    }\r\n    const availability = this.state.availability[p.manufacturer][p.id]\r\n    return availability ? availability : \"Error\"\r\n  }\r\n\r\n  selectPage = (page: number) => {\r\n    this.setState({ page })\r\n  }\r\n\r\n  updateFilter = (filter: string) => {\r\n    this.setState({ filter, page: 0 })\r\n  }\r\n\r\n  getCurrentPageCount = () => {\r\n    const products = this.state.products[this.state.category]\r\n    if (!products) {\r\n      return 0\r\n    }\r\n    return Math.ceil(products.length / this.pageItemCount)\r\n  }\r\n\r\n  selectProduct = async (selectedProduct: IProduct) => {\r\n    console.log(\"Selected product: \", selectedProduct)\r\n    this.setState({ selectedProduct })\r\n  }\r\n\r\n  selectCategory = async (category: string) => {\r\n    const prevCategory = this.state.category\r\n\r\n    if (this.state.products[category].length > 0) {\r\n      this.setState({ category, page: 0 })\r\n      return\r\n    }\r\n    this.setState({ category, loadingMessage: \"Loading products...\", page: 0 })\r\n\r\n    console.log(\"Enabled category: \", category)\r\n\r\n    const products = (await productApi.getCategoryProducts(category)).sort((a, b) => a.name.localeCompare(b.name))\r\n    if (products.length == 0) {\r\n      window.alert(\"There seems to be a problem accessing the database. Please try again later.\")\r\n      this.setState({ category: prevCategory, loadingMessage: \"\" })\r\n      return\r\n    }\r\n\r\n    const manufacturer = products.length > 0 ? this.getAvailableManufacturers(products)[0] : \"\"\r\n\r\n    const productDict = this.state.products\r\n    productDict[category] = products\r\n\r\n    this.setState({ products: productDict, loadingMessage: \"\" })\r\n    this.selectManufacturer(manufacturer)\r\n  }\r\n\r\n  selectManufacturer = async (manufacturer: string) => {\r\n    console.log(\"Selected manufacturer: \", manufacturer)\r\n\r\n    if (manufacturer == \"\") {\r\n      return\r\n    }\r\n\r\n    if (this.state.availability[manufacturer]) {\r\n      console.log(\"Already got information from manufacturer: \", manufacturer)\r\n      this.setState({ manufacturer, page: 0 })\r\n      return\r\n    }\r\n    this.setState({ manufacturer, loadingMessage: \"Loading stock data...\", page: 0 })\r\n\r\n    const manAvailabilityArray = await productApi.getManufacturerAvailability(manufacturer)\r\n    if (manAvailabilityArray.length == 0) {\r\n      if (manufacturer === this.state.manufacturer) {\r\n        window.alert(\"The availability data could not be accessed. There might be a problem with the database. Please try again later.\")\r\n      }\r\n      return\r\n    }\r\n\r\n    console.log(\"Received availability array: \", manAvailabilityArray)\r\n    const manAvailability: { [name: string]: string } = {}\r\n    manAvailabilityArray.forEach(a => {\r\n      manAvailability[a.id.toLowerCase()] = a.availability\r\n    });\r\n\r\n    const availability = this.state.availability\r\n    availability[manufacturer] = manAvailability\r\n    this.setState({ availability, loadingMessage: \"\" })\r\n  }\r\n\r\n  getAvailableManufacturers = (products: IProduct[]): string[] => {\r\n    if (!products) {\r\n      return []\r\n    }\r\n    const hs = new Set<string>()\r\n    products.forEach(p => {\r\n      hs.add(p.manufacturer)\r\n    });\r\n    const manufacturers: string[] = []\r\n    hs.forEach(m => {\r\n      manufacturers.push(m)\r\n    })\r\n    return manufacturers.sort()\r\n  }\r\n  //#endregion\r\n}\r\n\r\nexport default Listing",["39","40"],"P:\\Stuff\\Projects\\reaktor-assignment\\frontend\\src\\services\\productApi.ts",["41","42","43"],"import axios from 'axios'\r\nimport { IProduct, IAvailability } from '../../../general_types'\r\n\r\nconst baseURL = '/api/'\r\nconst timeout = 250\r\n\r\n// Used to cancel API call retries if another API call is requested\r\nlet apiRetryID = 0\r\n\r\n\r\nconst getCategoryProducts = async (category: string): Promise<IProduct[]> => {\r\n  const products = await getAPIResponse<IProduct[]>(apiPath([\"products\", category]))\r\n  return products ? products : []\r\n}\r\n\r\nconst getManufacturerAvailability = async (manufacturer: string): Promise<IAvailability[]> => {\r\n  const availability = await getAPIResponse<IAvailability[]>(apiPath([\"availability\", manufacturer]))\r\n  return availability ? availability : []\r\n}\r\n\r\nconst getAPIResponse = async <T>(path: string, retries = 6): Promise<T | null> => {\r\n  const retryID = ++apiRetryID\r\n  for (let i = 0; i < retries; i++) {\r\n    if (retryID !== apiRetryID) {\r\n      break\r\n    }\r\n    try {\r\n      const response = await axios.get(path)\r\n      if (response.status != 200) {\r\n        throw \"Invalid response status received: \" + response.status\r\n      }\r\n      return response.data as T\r\n    } catch (e) {\r\n      console.log(\"Error fetching JSON from API: \", e.message, e)\r\n    }\r\n\r\n    await delay(timeout)\r\n  }\r\n  return null\r\n}\r\n\r\nconst delay = (ms: number) => {\r\n  return new Promise(resolve => setTimeout(resolve, ms));\r\n}\r\n\r\nconst apiPath = (path: string[]) => {\r\n  return baseURL + path.join(\"/\")\r\n}\r\n\r\nexport default {\r\n  getCategoryProducts,\r\n  getManufacturerAvailability\r\n}","P:\\Stuff\\Projects\\reaktor-assignment\\frontend\\src\\components\\product.tsx",["44","45"],"import { IProduct } from '../../../general_types'\r\nimport { Item, List } from 'semantic-ui-react'\r\n\r\ntype ProductProps = {\r\n  product: IProduct,\r\n  availability: string\r\n}\r\n\r\ntype ProductListProps = {\r\n  products: ProductProps[],\r\n  clickHandler: (product: IProduct) => void\r\n}\r\n\r\ntype ProductListItemProps = {\r\n  product: IProduct,\r\n  availability: string,\r\n  clickHandler: () => void\r\n}\r\n\r\n\r\nexport const ProductInfo = ({ product, availability }: ProductProps) => <Item>\r\n  <Item.Content>\r\n    <Item.Header>{product.name}</Item.Header>\r\n    <Item.Description>\r\n      Availability: {availability}\r\n    </Item.Description>\r\n    <Item.Description>\r\n      Price: {product.price}\r\n    </Item.Description>\r\n    <Item.Description>\r\n      Manufacturer: {product.manufacturer}\r\n    </Item.Description>\r\n    <Item.Description>\r\n      Color: {product.color.join(\", \")}\r\n    </Item.Description>\r\n    <Item.Description>\r\n      Type: {product.type}\r\n    </Item.Description>\r\n    <Item.Description>\r\n      ID: {product.id}\r\n    </Item.Description>\r\n  </Item.Content>\r\n</Item>\r\n\r\nexport const ProductList = ({ products, clickHandler }: ProductListProps) => <List divided>\r\n  {products.map(p => {\r\n    return <List.Item key={p.product.id} onClick={() => clickHandler(p.product)}>\r\n      <List.Content>\r\n        <List.Header as='a'>{p.product.name}</List.Header>\r\n        {p.availability == \"\" ? \"\" : <List.Description>Availability: {p.availability}</List.Description>}\r\n\r\n        <List.Description>Price: {p.product.price}</List.Description>\r\n      </List.Content>\r\n    </List.Item>\r\n  })}\r\n</List>\r\n\r\nexport const ProductListItem = ({ product, availability, clickHandler }: ProductListItemProps) => <List.Item key={product.id} onClick={clickHandler}>\r\n  <List.Content>\r\n    <List.Header as='a'>{product.name}</List.Header>\r\n    {availability == \"\" ? \"\" : <List.Description>Availability: {availability}</List.Description>}\r\n\r\n    <List.Description>Price: {product.price}</List.Description>\r\n  </List.Content>\r\n</List.Item>","P:\\Stuff\\Projects\\reaktor-assignment\\frontend\\src\\components\\sidebar.tsx",["46"],"import React, { useState } from 'react'\r\nimport { Dropdown, Input, Button, Pagination, Message, Icon } from 'semantic-ui-react'\r\nimport { capitalize } from '../utils/capitalize'\r\n\r\ntype SideBarProps = {\r\n  currentCategory: string,\r\n  categories: string[],\r\n  selectCategory: (category: string) => void,\r\n  currentManufacturer: string,\r\n  manufacturers: string[],\r\n  selectManufacturer: (manufacturer: string) => void,\r\n  updateFilter: (filter: string) => void,\r\n  page: number,\r\n  pageCount: number,\r\n  selectPage: (page: number) => void,\r\n  loadingMessage: string,\r\n}\r\n\r\ntype DDownProps = {\r\n  placeholder: string,\r\n  value: string,\r\n  onChange: (value: string) => void,\r\n  options: string[]\r\n}\r\n\r\nconst SideBar = (props: SideBarProps) => {\r\n\r\n  const [filter, setFilter] = useState(\"\")\r\n\r\n  return <div>\r\n    <DDown placeholder=\"Select category\"\r\n      value={props.currentCategory}\r\n      onChange={props.selectCategory}\r\n      options={props.categories} />\r\n    <DDown placeholder=\"Select manufacturer\"\r\n      value={props.currentManufacturer}\r\n      onChange={props.selectManufacturer}\r\n      options={props.manufacturers} />\r\n      &nbsp;\r\n      <Input icon='search'\r\n      style={{ width: \"272px\" }}\r\n      onChange={(e, data) => setFilter(data.value as string)}>\r\n      <input />\r\n      <Button type='submit' onClick={() => props.updateFilter(filter)}>Search</Button>\r\n    </Input>\r\n      &nbsp;\r\n      {props.pageCount > 0 ? <Pagination\r\n      style={{ width: \"272px\" }}\r\n      boundaryRange={0}\r\n      ellipsisItem={null}\r\n      firstItem={null}\r\n      lastItem={null}\r\n      siblingRange={1}\r\n      totalPages={props.pageCount}\r\n      activePage={props.page + 1}\r\n      onPageChange={(e, data) => props.selectPage(Number(data.activePage) - 1)}\r\n    /> : \"\"}\r\n    &nbsp;\r\n      {props.loadingMessage.length == 0 ? \"\" : <Message icon>\r\n      <Icon name='circle notched' loading />\r\n      <Message.Content>{props.loadingMessage}</Message.Content>\r\n    </Message>}\r\n  </div>\r\n}\r\n\r\nconst DDown = (props: DDownProps) => <Dropdown\r\n  placeholder={props.placeholder}\r\n  fluid\r\n  selection\r\n  value={props.value}\r\n  onChange={(event, data) => props.onChange(data.value as string)}\r\n  options={props.options.map(o => {\r\n    return {\r\n      key: o,\r\n      text: capitalize(o),\r\n      value: o\r\n    }\r\n  })}\r\n/>\r\n\r\nexport default SideBar","P:\\Stuff\\Projects\\reaktor-assignment\\frontend\\src\\utils\\capitalize.ts",[],{"ruleId":"47","severity":1,"message":"48","line":100,"column":38,"nodeType":"49","messageId":"50","endLine":100,"endColumn":40},{"ruleId":"47","severity":1,"message":"48","line":145,"column":25,"nodeType":"49","messageId":"50","endLine":145,"endColumn":27},{"ruleId":"47","severity":1,"message":"48","line":163,"column":22,"nodeType":"49","messageId":"50","endLine":163,"endColumn":24},{"ruleId":"47","severity":1,"message":"48","line":175,"column":37,"nodeType":"49","messageId":"50","endLine":175,"endColumn":39},{"ruleId":"51","replacedBy":"52"},{"ruleId":"53","replacedBy":"54"},{"ruleId":"47","severity":1,"message":"55","line":29,"column":27,"nodeType":"49","messageId":"50","endLine":29,"endColumn":29},{"ruleId":"56","severity":1,"message":"57","line":30,"column":9,"nodeType":"58","messageId":"59","endLine":30,"endColumn":69},{"ruleId":"60","severity":1,"message":"61","line":50,"column":1,"nodeType":"62","endLine":53,"endColumn":2},{"ruleId":"47","severity":1,"message":"48","line":50,"column":25,"nodeType":"49","messageId":"50","endLine":50,"endColumn":27},{"ruleId":"47","severity":1,"message":"48","line":61,"column":19,"nodeType":"49","messageId":"50","endLine":61,"endColumn":21},{"ruleId":"47","severity":1,"message":"48","line":59,"column":36,"nodeType":"49","messageId":"50","endLine":59,"endColumn":38},"eqeqeq","Expected '===' and instead saw '=='.","BinaryExpression","unexpected","no-native-reassign",["63"],"no-negated-in-lhs",["64"],"Expected '!==' and instead saw '!='.","no-throw-literal","Expected an error object to be thrown.","ThrowStatement","object","import/no-anonymous-default-export","Assign object to a variable before exporting as module default","ExportDefaultDeclaration","no-global-assign","no-unsafe-negation"]