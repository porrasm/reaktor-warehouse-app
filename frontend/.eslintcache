[{"P:\\Stuff\\Projects\\reaktor-assignment\\frontend\\src\\index.tsx":"1","P:\\Stuff\\Projects\\reaktor-assignment\\frontend\\src\\reportWebVitals.ts":"2","P:\\Stuff\\Projects\\reaktor-assignment\\frontend\\src\\App.tsx":"3","P:\\Stuff\\Projects\\reaktor-assignment\\frontend\\src\\components\\listing.tsx":"4","P:\\Stuff\\Projects\\reaktor-assignment\\frontend\\src\\services\\productApi.ts":"5"},{"size":567,"mtime":1611056305173,"results":"6","hashOfConfig":"7"},{"size":425,"mtime":499162500000,"results":"8","hashOfConfig":"7"},{"size":236,"mtime":1610805904208,"results":"9","hashOfConfig":"7"},{"size":9437,"mtime":1611056384502,"results":"10","hashOfConfig":"7"},{"size":2106,"mtime":1611056578188,"results":"11","hashOfConfig":"7"},{"filePath":"12","messages":"13","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"14"},"1kl511w",{"filePath":"15","messages":"16","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"14"},{"filePath":"17","messages":"18","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"19","usedDeprecatedRules":"14"},{"filePath":"20","messages":"21","errorCount":0,"warningCount":9,"fixableErrorCount":0,"fixableWarningCount":0,"source":"22","usedDeprecatedRules":"14"},{"filePath":"23","messages":"24","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"25"},"P:\\Stuff\\Projects\\reaktor-assignment\\frontend\\src\\index.tsx",[],["26","27"],"P:\\Stuff\\Projects\\reaktor-assignment\\frontend\\src\\reportWebVitals.ts",[],"P:\\Stuff\\Projects\\reaktor-assignment\\frontend\\src\\App.tsx",["28"],"import React from 'react';\nimport logo from './logo.svg';\nimport './App.css';\nimport Listing from './components/listing';\n\nfunction App() {\n  return (\n    <div className=\"App\">\n\n      <Listing />\n\n    </div>\n  );\n}\n\nexport default App;\n","P:\\Stuff\\Projects\\reaktor-assignment\\frontend\\src\\components\\listing.tsx",["29","30","31","32","33","34","35","36","37"],"import { stringify } from 'querystring';\r\nimport React from 'react';\r\nimport { Container, Grid, Menu, Rail, Segment, Dropdown, Item, Message, List, Icon, Input, Pagination, Button } from 'semantic-ui-react'\r\nimport productApi from '../services/productApi'\r\nimport { IProduct } from '../services/productApi'\r\n\r\nexport interface IViewState {\r\n  message: string,\r\n  loadingMessage: string,\r\n  category: string,\r\n  manufacturer: string,\r\n  selectedProduct: IProduct | null,\r\n  products: { [name: string]: Array<IProduct> },\r\n  availability: { [name: string]: { [name: string]: string } },\r\n  page: number,\r\n  filter: string\r\n}\r\n\r\nclass Listing extends React.Component<any, IViewState> {\r\n\r\n  pageItemCount = 20\r\n  categories = [\"gloves\", \"facemasks\", \"beanies\"]\r\n  timer: any = null\r\n  filterUpdate: string = \"\"\r\n\r\n  constructor(props: any) {\r\n    super(props)\r\n\r\n    const productDict: { [name: string]: Array<IProduct> } = {}\r\n    this.categories.forEach(c => {\r\n      productDict[c] = []\r\n    });\r\n\r\n    this.state = {\r\n      message: \"\",\r\n      loadingMessage: \"\",\r\n      category: \"\",\r\n      manufacturer: \"\",\r\n      selectedProduct: null,\r\n      products: productDict,\r\n      availability: {},\r\n      page: 0,\r\n      filter: \"\"\r\n    }\r\n  }\r\n\r\n  render() {\r\n    return (\r\n      <div>\r\n        <Container>\r\n          <Grid centered columns={3}>\r\n            <Grid.Column>\r\n              <Segment>\r\n                {this.state.message == \"\" ? \"\" : <Message onClick={() => this.setState({ message: \"\" })}><Message.Content>{this.state.filter}</Message.Content></Message>}\r\n                {this.getProductListing(this.state.products[this.state.category])}\r\n\r\n                <Rail position=\"left\">{this.leftRail()}</Rail>\r\n                <Rail position=\"right\">{this.productInfo(this.state.selectedProduct)}</Rail>\r\n              </Segment>\r\n            </Grid.Column>\r\n          </Grid>\r\n        </Container>\r\n      </div>\r\n    );\r\n  }\r\n\r\n\r\n  //#region views\r\n  leftRail = () => {\r\n\r\n    const pageCount = this.getCurrentPageCount()\r\n\r\n    return <div>\r\n      {this.getCategoryDropdown(this.categories)}\r\n      {this.getManufacturerDropdown()}\r\n      &nbsp;\r\n      <Input icon='search'\r\n        style={{ width: \"272px\" }}\r\n        onChange={(e, data) => this.filterUpdate = data.value}>\r\n        <input />\r\n        <Button type='submit' onClick={this.filterSearch}>Search</Button>\r\n      </Input>\r\n      &nbsp;\r\n      {pageCount > 0 ? <Pagination\r\n        style={{ width: \"272px\" }}\r\n        boundaryRange={0}\r\n        ellipsisItem={null}\r\n        firstItem={null}\r\n        lastItem={null}\r\n        siblingRange={1}\r\n        totalPages={pageCount}\r\n        activePage={this.state.page + 1}\r\n        onPageChange={(e, data) => { this.setState({ page: Number(data.activePage) - 1 }) }}\r\n      /> : \"\"}\r\n\r\n      &nbsp;\r\n      {this.state.loadingMessage.length == 0 ? \"\" : <Message icon><Icon name='circle notched' loading /><Message.Content>{this.state.loadingMessage}</Message.Content></Message>}\r\n    </div >\r\n  }\r\n\r\n  getCategoryDropdown = (categories: Array<string>) => {\r\n    return <Dropdown\r\n      placeholder=\"Select category\"\r\n      fluid\r\n      selection\r\n      value={this.state.category}\r\n      onChange={(event, data) => this.selectCategory(data.value as string)}\r\n      options={categories.map(c => {\r\n        return {\r\n          key: c,\r\n          text: this.categoryToString(c),\r\n          value: c\r\n        }\r\n      })}\r\n    />\r\n  }\r\n\r\n  getManufacturerDropdown = () => {\r\n    const manufacturers = this.getAvailableManufacturers(this.state.products[this.state.category])\r\n    return <Dropdown\r\n      placeholder=\"Select Manufacturer\"\r\n      fluid\r\n      selection\r\n      value={this.state.manufacturer}\r\n      onChange={(event, data) => this.selectManufacturer(data.value as string)}\r\n      options={manufacturers.map(c => {\r\n        return {\r\n          key: c,\r\n          text: this.categoryToString(c),\r\n          value: c\r\n        }\r\n      })}\r\n    />\r\n  }\r\n\r\n  getProductListing = (products: Array<IProduct>) => {\r\n    const page = this.state.page * this.pageItemCount\r\n    if (!products) {\r\n      return\r\n    } else {\r\n\r\n      return (\r\n        <List divided>\r\n          {products.filter(p => {\r\n            return this.state.manufacturer == p.manufacturer && p.name.toLocaleLowerCase().includes(this.state.filter.toLowerCase())\r\n          }).slice(page, page + this.pageItemCount)\r\n            .map(p => {\r\n              const availability: string | Element = this.getProductAvailability(p)\r\n              return <List.Item key={p.id} onClick={() => this.selectProduct(p)}>\r\n                <List.Content>\r\n                  <List.Header as='a'>{p.name}</List.Header>\r\n                  {availability == \"\" ? \"\" : <List.Description>Availability: {availability}</List.Description>}\r\n\r\n                  <List.Description>Price: {p.price}</List.Description>\r\n                </List.Content>\r\n              </List.Item>\r\n            })}\r\n        </List>\r\n      )\r\n    }\r\n  }\r\n\r\n  getProductAvailability = (p: IProduct) => {\r\n    if (!this.state.availability[p.manufacturer]) {\r\n      return \"\"\r\n    }\r\n    const availability = this.state.availability[p.manufacturer][p.id]\r\n    return availability ? availability : \"Error\"\r\n  }\r\n\r\n  productInfo = (product: IProduct | null) => {\r\n    if (!product) {\r\n      return <Message>Select a product to view more info</Message>\r\n    }\r\n    return <Container>\r\n      <Item>\r\n        <Item.Content>\r\n          <Item.Header>{product.name}</Item.Header>\r\n          <Item.Description>\r\n            Availability: {this.getProductAvailability(product)}\r\n          </Item.Description>\r\n          <Item.Description>\r\n            Price: {product.price}\r\n          </Item.Description>\r\n          <Item.Description>\r\n            Manufacturer: {product.manufacturer}\r\n          </Item.Description>\r\n          <Item.Description>\r\n            Color: {product.color.join(\", \")}\r\n          </Item.Description>\r\n          <Item.Description>\r\n            Type: {product.type}\r\n          </Item.Description>\r\n          <Item.Description>\r\n            ID: {product.id}\r\n          </Item.Description>\r\n        </Item.Content>\r\n      </Item>\r\n    </Container>\r\n  }\r\n  //#endregion\r\n\r\n  //#region utility\r\n  filterSearch = () => {\r\n    this.setState({ filter: this.filterUpdate, page: 0 })\r\n  }\r\n\r\n  getCurrentPageCount = () => {\r\n    const products = this.state.products[this.state.category]\r\n    if (!products) {\r\n      return 0\r\n    }\r\n    return Math.ceil(products.length / this.pageItemCount)\r\n  }\r\n\r\n  selectProduct = async (selectedProduct: IProduct) => {\r\n    console.log(\"Selected product: \", selectedProduct)\r\n    this.setState({ selectedProduct })\r\n  }\r\n\r\n  selectCategory = async (category: string) => {\r\n    const prevCategory = this.state.category\r\n\r\n    if (this.state.products[category].length > 0) {\r\n      this.setState({ category, page: 0 })\r\n      return\r\n    }\r\n    this.setState({ category, loadingMessage: \"Loading products...\", page: 0 })\r\n\r\n    console.log(\"Enabled category: \", category)\r\n\r\n    const products = (await productApi.getCategoryProducts(category)).sort((a, b) => a.name.localeCompare(b.name))\r\n    if (products.length == 0) {\r\n      window.alert(\"There seems to be a problem accessing the database. Please try again later.\")\r\n      this.setState({ category: prevCategory, loadingMessage: \"\" })\r\n      return\r\n    }\r\n\r\n    const manufacturer = products.length > 0 ? this.getAvailableManufacturers(products)[0] : \"\"\r\n\r\n    const productDict = this.state.products\r\n    productDict[category] = products\r\n\r\n    this.setState({ products: productDict, loadingMessage: \"\" })\r\n    this.selectManufacturer(manufacturer)\r\n  }\r\n\r\n  selectManufacturer = async (manufacturer: string) => {\r\n    console.log(\"Selected manufacturer: \", manufacturer)\r\n\r\n    if (manufacturer == \"\") {\r\n      return\r\n    }\r\n\r\n    if (this.state.availability[manufacturer]) {\r\n      console.log(\"Already got information from manufacturer: \", manufacturer)\r\n      this.setState({ manufacturer, page: 0 })\r\n      return\r\n    }\r\n    this.setState({ manufacturer, loadingMessage: \"Loading stock data...\", page: 0 })\r\n\r\n    const manAvailabilityArray = await productApi.getManufacturerAvailability(manufacturer)\r\n    if (manAvailabilityArray.length == 0) {\r\n      if (manufacturer === this.state.manufacturer) {\r\n        window.alert(\"The availability data could not be accessed. There might be a problem with the database. Please try again later.\")\r\n      }\r\n      return\r\n    }\r\n\r\n    console.log(\"Received availability array: \", manAvailabilityArray)\r\n    const manAvailability: { [name: string]: string } = {}\r\n    manAvailabilityArray.forEach(a => {\r\n      manAvailability[a.id.toLowerCase()] = a.availability\r\n    });\r\n\r\n    const availability = this.state.availability\r\n    availability[manufacturer] = manAvailability\r\n    this.setState({ availability, loadingMessage: \"\" })\r\n  }\r\n\r\n  getAvailableManufacturers = (products: Array<IProduct>): string[] => {\r\n    if (!products) {\r\n      return []\r\n    }\r\n    const hs = new Set<string>()\r\n    products.forEach(p => {\r\n      hs.add(p.manufacturer)\r\n    });\r\n    const manufacturers: string[] = []\r\n    hs.forEach(m => {\r\n      manufacturers.push(m)\r\n    })\r\n    return manufacturers.sort()\r\n  }\r\n\r\n  categoryToString = (cat: string) => {\r\n    return cat.substring(0, 1).toUpperCase() + cat.substring(1)\r\n  }\r\n  //#endregion\r\n}\r\n\r\nexport default Listing","P:\\Stuff\\Projects\\reaktor-assignment\\frontend\\src\\services\\productApi.ts",["38","39","40"],"import axios from 'axios'\r\n\r\nconst baseURL = '/api/'\r\nconst timeout = 250\r\n\r\nlet callID = 0\r\n\r\nexport interface IProduct {\r\n  id: string,\r\n  type: string,\r\n  name: string,\r\n  color: Array<string>,\r\n  price: number,\r\n  manufacturer: string\r\n}\r\n\r\nexport interface IAvailability {\r\n  id: string,\r\n  availability: string\r\n}\r\n\r\nconst getCategoryProducts = async (category: string, retries = 6): Promise<Array<IProduct>> => {\r\n  const id = ++callID\r\n  for (let i = 0; i < retries; i++) {\r\n    if (id !== callID) {\r\n      break\r\n    }\r\n    console.log(`API request for products (retries left: ${retries - 1 - i}): `, category)\r\n    try {\r\n      const response = await axios.get(apiPath([\"products\", category]))\r\n      if (response.status = 200) {\r\n        return response.data as Array<IProduct>\r\n      } else {\r\n        console.log(\"Error fetchin product data: \", response)\r\n        return []\r\n      }\r\n    } catch (e) {\r\n      console.log('Error getting products: ', { category, message: e.message, e })\r\n    }\r\n\r\n    await delay(timeout)\r\n  }\r\n  return []\r\n}\r\n\r\n\r\nconst getManufacturerAvailability = async (manufacturer: string, retries = 6): Promise<Array<IAvailability>> => {\r\n  const id = ++callID\r\n  for (let i = 0; i < retries; i++) {\r\n    if (id !== callID) {\r\n      break\r\n    }\r\n    console.log(`API request for availability (retries left: ${retries - 1 - i}): `, manufacturer)\r\n    try {\r\n      const response = await axios.get(apiPath([\"availability\", manufacturer]))\r\n      if (response.status == 200) {\r\n        return response.data as Array<IAvailability>\r\n      } else {\r\n        console.log(\"Error fetching availability data: \", response)\r\n        return []\r\n      }\r\n\r\n    } catch (e) {\r\n      console.log('Error getting availability: ', { manufacturer, message: e.message, e })\r\n    }\r\n\r\n    await delay(timeout)\r\n  }\r\n  return []\r\n}\r\n\r\nconst delay = (ms: number) => {\r\n  return new Promise(resolve => setTimeout(resolve, ms));\r\n}\r\n\r\nconst apiPath = (path: Array<string>) => {\r\n  return baseURL + path.join(\"/\")\r\n}\r\n\r\nexport default {\r\n  getCategoryProducts,\r\n  getManufacturerAvailability,\r\n}",{"ruleId":"41","replacedBy":"42"},{"ruleId":"43","replacedBy":"44"},{"ruleId":"45","severity":1,"message":"46","line":2,"column":8,"nodeType":"47","messageId":"48","endLine":2,"endColumn":12},{"ruleId":"45","severity":1,"message":"49","line":1,"column":10,"nodeType":"47","messageId":"48","endLine":1,"endColumn":19},{"ruleId":"45","severity":1,"message":"50","line":3,"column":27,"nodeType":"47","messageId":"48","endLine":3,"endColumn":31},{"ruleId":"51","severity":1,"message":"52","line":54,"column":37,"nodeType":"53","messageId":"54","endLine":54,"endColumn":39},{"ruleId":"51","severity":1,"message":"52","line":97,"column":41,"nodeType":"53","messageId":"54","endLine":97,"endColumn":43},{"ruleId":"51","severity":1,"message":"52","line":145,"column":44,"nodeType":"53","messageId":"54","endLine":145,"endColumn":46},{"ruleId":"51","severity":1,"message":"52","line":152,"column":33,"nodeType":"53","messageId":"54","endLine":152,"endColumn":35},{"ruleId":"51","severity":1,"message":"52","line":233,"column":25,"nodeType":"53","messageId":"54","endLine":233,"endColumn":27},{"ruleId":"51","severity":1,"message":"52","line":251,"column":22,"nodeType":"53","messageId":"54","endLine":251,"endColumn":24},{"ruleId":"51","severity":1,"message":"52","line":263,"column":37,"nodeType":"53","messageId":"54","endLine":263,"endColumn":39},{"ruleId":"55","severity":1,"message":"56","line":31,"column":11,"nodeType":"57","messageId":"58","endLine":31,"endColumn":32},{"ruleId":"51","severity":1,"message":"52","line":56,"column":27,"nodeType":"53","messageId":"54","endLine":56,"endColumn":29},{"ruleId":"59","severity":1,"message":"60","line":80,"column":1,"nodeType":"61","endLine":83,"endColumn":2},"no-native-reassign",["62"],"no-negated-in-lhs",["63"],"@typescript-eslint/no-unused-vars","'logo' is defined but never used.","Identifier","unusedVar","'stringify' is defined but never used.","'Menu' is defined but never used.","eqeqeq","Expected '===' and instead saw '=='.","BinaryExpression","unexpected","no-cond-assign","Expected a conditional expression and instead saw an assignment.","AssignmentExpression","missing","import/no-anonymous-default-export","Assign object to a variable before exporting as module default","ExportDefaultDeclaration","no-global-assign","no-unsafe-negation"]